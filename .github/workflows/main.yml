name: CI

on:
  push:
  pull_request:
  release:
    types:
      - created

env:
  version_suffix:

jobs:
  build-ubuntu:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
    steps:
    - uses: actions/checkout@v2
    - name: apt update
      run: sudo apt update
    - name: apt
      run: >
        sudo apt-get install default-jdk default-jdk-headless default-jre default-jre-headless 
        zlib1g zlib1g-dev libssl-dev libusb-1.0-0 python-dev python-numpy python-setuptools 
        libusb-1.0-0-dev libdbus-1-3 libdbus-1-dev libbluetooth3 libbluetooth-dev zlib1g zlib1g-dev 
        git cmake g++ make libboost-all-dev autoconf 
        automake libtool bison libpcre3-dev python3-dev python3-numpy python3-setuptools python3-wheel 
        mono-devel -q
    - name: build-swig
      run: |
        sudo apt remove swig
        sudo rm -f /usr/bin/swig*
        sudo rm -rf /usr/share/swig*
        cd ..
        rm -rf swig_build_dir
        mkdir -p swig_build_dir
        cd swig_build_dir
        curl -L http://prdownloads.sourceforge.net/swig/swig-4.0.2.tar.gz --output swig-4.0.2.tar.gz
        tar xf swig-4.0.2.tar.gz
        cd swig-4.0.2
        ./configure
        make
        sudo make install        
    - name: configure
      run: >
        cd .. &&
        mkdir build2 && cd build2 &&
        cmake -G "Unix Makefiles" -DBUILD_GEN=ON  -DBUILD_TEST=ON -DBUILD_PYTHON3=ON -DBUILD_PYTHON3_WHEEL=ON 
        -DBoost_USE_STATIC_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DPYTHON3_EXECUTABLE=/usr/bin/python3 
        -DBUILD_JAVA=ON -DBUILD_NET=ON -DPACKAGE_SWIG_SOURCE_ALL=ON -DJAVA_HOME=/usr/lib/jvm/default-java 
        -DBUILD_PYTHON=ON -DBUILD_PYTHON_WHEEL=OFF -DROBOTRACONTEUR_VERSION_SUFFIX="${{ env.version_suffix }}"
        ../robotraconteur
    - name: build
      run: |        
        cd ../build2
        cmake --build . --config Release -j 4
    - name: build source
      run: |
        cd ../build2
        cmake --build . --config Release --target package_source || true
        mv generated_src out/
        cp ../robotraconteur/LICENSE.txt out/
        cp *.tar.gz out/ || true
        cp *.zip out/ || true
    - name: test
      run: |
        cd ../build2
        ctest . -C Release --output-on-failure
    - name: move out
      run: |
        cp LICENSE.txt ../build2/out/
        mv ../build2/out .
    - name: archive out
      uses: actions/upload-artifact@v2
      with:
        name: 'out-${{ matrix.os }}'
        path: out/*
  build-win:
    runs-on: windows-2016
    strategy:
      matrix:
        arch: [x64,x86]
    env:
      BOOST_ROOT_1_72_0: C:\hostedtoolcache\windows\Boost\1.72.0\x86_64
    steps:
    - uses: actions/checkout@v2
    - name: install_boost
      run: |
        $url = "https://github.com/actions/boost-versions/releases/download/1.72.0-20200608.4/boost-1.72.0-win32-msvc14.1-x86_64.tar.gz"
        (New-Object System.Net.WebClient).DownloadFile($url, "$env:TEMP\boost.tar.gz")
        7z.exe x "$env:TEMP\boost.tar.gz" -o"$env:TEMP\boostArchive" -y | Out-Null
        7z.exe x "$env:TEMP\boostArchive" -o"$env:TEMP\boost" -y | Out-Null
        Push-Location -Path "$env:TEMP\boost"
        Invoke-Expression .\setup.ps1
      shell: powershell
    - uses: actions/setup-java@v1
      with:
        java-version: 8
        java-package: jdk
        architecture: ${{ matrix.arch }}
    - uses: actions/setup-python@v2
      with:
        python-version: '2.7'
        architecture: ${{ matrix.arch }}
    - name: pip
      run: |
        python -m pip install numpy setuptools wheel
    - name: env python2
      run: echo  ("PYTHON2_EXE=" + (Get-Command Python.exe).Path) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: ${{ matrix.arch }}
    - name: pip3
      run: |
        python -m pip install numpy setuptools wheel
    - name: env python3
      run: echo  ("PYTHON3_EXE=" + (Get-Command Python.exe).Path) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - name: choco
      run: |
        choco install swig -r
    - uses: haya14busa/action-cond@v1
      id: cmake_arch
      with:
        cond: ${{ matrix.arch == 'x86' }}
        if_true: "Win32"
        if_false: "x64"
    - name: configure
      run: >
        cd .. &&
        md -Force build2 && cd build2 &&
        cmake -G "Visual Studio 15 2017" -A ${{ steps.cmake_arch.outputs.value }} -DBUILD_GEN=ON -DBUILD_TEST=ON 
        -DBUILD_NET=ON -DBoost_USE_STATIC_LIBS=ON -DBUILD_PYTHON=ON 
        -DBUILD_PYTHON_WHEEL=ON -DBUILD_PYTHON3=ON -DBUILD_PYTHON3_WHEEL=ON -DBUILD_JAVA=ON 
        -DBOOST_ROOT="${env:BOOST_ROOT_1_72_0}" -DPYTHON_EXECUTABLE="${{ env.PYTHON2_EXE }}"
        -DPYTHON3_EXECUTABLE="${{ env.PYTHON3_EXE }}" -DROBOTRACONTEUR_VERSION_SUFFIX="${{ env.version_suffix }}"
        ../robotraconteur
    - name: build
      run: |
        cd ../build2
        cmake --build . --config Release -j 4
    - name: test
      if: ${{ matrix.arch != 'x86' }}
      run: |
        cd ../build2
        ctest . -C Release --output-on-failure
    - name: test x86
      if: ${{ matrix.arch == 'x86' }}
      run: |
        cd ../build2
        ctest . -C Release --output-on-failure -E java
    - name: move out
      run: |
        mv ../build2/out .
    - name: archive out
      uses: actions/upload-artifact@v2
      with:
        name: 'out-win-${{ matrix.arch }}'
        path: out/*

  build-osx:

    runs-on: macos-10.15
    env:
      LIBRARY_PATH: /usr/local/opt/icu4c/lib
    steps:
    - uses: actions/checkout@v2
    - name: brew
      run: |
        brew update
        brew install swig boost openssl
    - name: install pip
      run: |
        sudo /usr/bin/easy_install pip==19.3.1
        sudo /usr/bin/python -m pip install --upgrade pip
    - name: pip
      run: |
        /usr/bin/python -m pip install setuptools wheel
    - name: env python2
      run: echo "PYTHON2_EXE=/usr/bin/python" >> $GITHUB_ENV
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: x64
    - name: pip3
      run: |
        python -m pip install numpy setuptools wheel
    - name: env python3
      run: echo "PYTHON3_EXE=${{ env.pythonLocation }}/bin/python" >> $GITHUB_ENV
    - name: configure
      run: >
        cd .. &&
        mkdir build2 && cd build2 &&
        cmake -G "Xcode" -DBUILD_GEN=ON  -DBUILD_TEST=ON -DBUILD_PYTHON3=ON -DBUILD_PYTHON3_WHEEL=ON 
        -DBoost_USE_STATIC_LIBS=ON -DCMAKE_BUILD_TYPE=Release 
        -DBUILD_JAVA=ON -DBUILD_NET=ON -DPACKAGE_SWIG_SOURCE_ALL=ON 
        -DBUILD_PYTHON=ON -DBUILD_PYTHON_WHEEL=ON -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl
        -DOPENSSL_USE_STATIC_LIBS=ON -DPYTHON_EXECUTABLE="${{ env.PYTHON2_EXE }}"
        -DPYTHON3_EXECUTABLE="${{ env.PYTHON3_EXE }}" -DROBOTRACONTEUR_VERSION_SUFFIX="${{ env.version_suffix }}"
        ../robotraconteur
    - name: build
      run: |        
        cd ../build2
        cmake --build . --config Release -j 4
    - name: test
      run: |
        cd ../build2
        ctest . -C Release --output-on-failure
    - name: move out
      run: |
        cp LICENSE.txt ../build2/out/
        mv ../build2/out .
    - name: archive out
      uses: actions/upload-artifact@v2
      with:
        name: 'out-osx'
        path: out/*
    
      