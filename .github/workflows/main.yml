name: CI

on:
  push:
  pull_request:
  release:
    types:
      - created

env:
  version_suffix:

jobs:
  build-ubuntu:

    runs-on: ${{ matrix.config.runs_on }}
    container: ${{ matrix.config.container }}
    strategy:
      matrix:
        config:
        - os: ubuntu-18.04
          runs_on: ubuntu-18.04
          container: ""
        - os: ubuntu-20.04
          runs_on: ubuntu-20.04
          container: ""
        - os: ubuntu-16.04
          runs_on: ubuntu-latest
          container: ubuntu:xenial
        - os: debian-10
          runs_on: ubuntu-latest
          container: debian:buster-slim
    env:
      DEBIAN_FRONTEND: noninteractive
    steps:
    - uses: actions/checkout@v2
      with:
        path: robotraconteur
    - name: install sudo
      if: ${{ startsWith(matrix.config.os, 'debian') }}
      run: |
        apt update 
        apt install sudo -y
    - name: apt update
      run: sudo apt update
    - name: apt
      run: >
        sudo apt-get install default-jdk default-jdk-headless default-jre default-jre-headless 
        zlib1g zlib1g-dev libssl-dev libusb-1.0-0 python-dev python-numpy python-setuptools 
        libusb-1.0-0-dev libdbus-1-3 libdbus-1-dev libbluetooth3 libbluetooth-dev zlib1g zlib1g-dev 
        git cmake g++ make libboost-all-dev autoconf 
        automake libtool bison libpcre3-dev python3-dev python3-numpy python3-setuptools python3-wheel 
        mono-devel curl -qq
    - name: cache-swig
      if: startsWith(github.ref, 'refs/tags/v') != true
      id: cache-swig
      uses: actions/cache@v2
      with:
        path: swig_build_dir
        key: ${{ runner.os }}-${{ matrix.config.os }}-swig-4.0.2-main
    - name: build-swig
      if: steps.cache-swig.outputs.cache-hit != 'true'
      run: |
        sudo apt remove swig -qq || true
        sudo rm -f /usr/bin/swig*
        sudo rm -rf /usr/share/swig*
        rm -rf swig_build_dir
        mkdir -p swig_build_dir
        cd swig_build_dir
        curl -s -L https://github.com/swig/swig/archive/refs/tags/v4.0.2.tar.gz --output swig-4.0.2.tar.gz
        tar xf swig-4.0.2.tar.gz
        cd swig-4.0.2
        ./autogen.sh
        ./configure
        make
        sudo make install
    - name: install-swig
      if: steps.cache-swig.outputs.cache-hit == 'true'
      working-directory: swig_build_dir/swig-4.0.2
      run: |
        sudo apt remove swig -qq
        sudo rm -f /usr/bin/swig*
        sudo rm -rf /usr/share/swig*
        sudo make install
    - name: cache-build
      if: startsWith(github.ref, 'refs/tags/v') != true
      id: cache-build
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ runner.os }}-${{ matrix.config.os }}-build-main-ccache
    - name: cmake cache args
      id: cmake-cache-args
      if: startsWith(github.ref, 'refs/tags/v') != true
      run: >
        echo "CMAKE_CACHE_ARGS=-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON" >> $GITHUB_ENV
    - name: configure
      run: >
        cmake -G "Unix Makefiles" -DBUILD_GEN=ON  -DBUILD_TEST=ON -DBUILD_PYTHON3=ON -DBUILD_PYTHON3_WHEEL=ON 
        -DBoost_USE_STATIC_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DPYTHON3_EXECUTABLE=/usr/bin/python3 
        -DBUILD_JAVA=ON -DBUILD_NET=ON -DPACKAGE_SWIG_SOURCE_ALL=ON -DJAVA_HOME=/usr/lib/jvm/default-java 
        -DBUILD_PYTHON=ON -DBUILD_PYTHON_WHEEL=OFF -DROBOTRACONTEUR_VERSION_SUFFIX="${{ env.version_suffix }}"
        ${{ env.CMAKE_CACHE_ARGS }}
        -S robotraconteur -B build2
    - name: build
      working-directory: build2
      run: |
        cmake --build . --config Release -j 4
    - name: build source
      working-directory: build2
      run: |
        cmake --build . --config Release --target package_source || true
        mv generated_src out/
        cp *.tar.gz out/ || true
        cp *.zip out/ || true
    - name: test
      working-directory: build2
      run: |
        ctest . -C Release --output-on-failure
    - name: move out
      run: |
        cp build2/rrversion.txt build2/out/
        cp robotraconteur/LICENSE.txt build2/out/
        mv build2/out .
    - name: archive out
      uses: actions/upload-artifact@v2
      with:
        name: 'out-${{ matrix.config.os }}'
        path: out/*
    - name: build artifacts
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: 'build-artifacts-${{ matrix.config.os }}'
        path: build2/*
        retention-days: 2
  build-win:
    runs-on: windows-2016
    strategy:
      matrix:
        config:
          - arch: x64
            vcpkg_triplet: x64-windows-static-md
            cmake_arch: x64
          - arch: x86
            vcpkg_triplet: x86-windows-static-md
            cmake_arch: Win32
    steps:
    - uses: actions/checkout@v2
      with:
        path: robotraconteur
    - name: checkout vcpkg
      uses: actions/checkout@v2
      with:
        path: vcpkg
        repository: microsoft/vcpkg
    - name: cache-vcpkg-archives
      if: startsWith(github.ref, 'refs/tags/v') != true
      id: cache-vcpkg-archives
      uses: actions/cache@v2
      with:
        path: C:\Users\runneradmin\AppData\Local\vcpkg\archives
        key: ${{ runner.os }}-${{matrix.config.arch}}-vcpkg-${{ hashFiles('vcpkg/ports/boost-config/*') }}-${{ hashFiles('vcpkg/ports/openssl/*') }}-main
    - name: bootstrap vcpkg
      working-directory: vcpkg
      run: bootstrap-vcpkg.bat
    - name: vcpkg
      working-directory: vcpkg
      run: >
        vcpkg install --triplet ${{ matrix.config.vcpkg_triplet }} boost-algorithm boost-array boost-asio 
        boost-assign boost-atomic boost-bind boost-config boost-container boost-date-time 
        boost-smart-ptr boost-filesystem boost-foreach boost-format boost-function boost-interprocess
        boost-intrusive boost-lexical-cast boost-locale boost-random boost-range boost-regex
        boost-scope-exit boost-signals2 boost-thread boost-tuple boost-unordered 
        boost-utility boost-uuid boost-program-options
    - uses: actions/setup-java@v1
      with:
        java-version: 8
        java-package: jdk
        architecture: ${{ matrix.config.arch }}
    - uses: actions/setup-python@v2
      with:
        python-version: '2.7'
        architecture: ${{ matrix.config.arch }}
    - name: pip
      run: |
        python -m pip install numpy setuptools wheel
    - name: env python2
      run: echo  ("PYTHON2_EXE=" + (Get-Command Python.exe).Path) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: ${{ matrix.config.arch }}
    - name: pip3
      run: |
        python -m pip install numpy setuptools wheel
    - name: env python3
      run: echo  ("PYTHON3_EXE=" + (Get-Command Python.exe).Path) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - name: choco
      run: |
        choco install swig -r
    - name: cache-build
      if: startsWith(github.ref, 'refs/tags/v') != true
      id: cache-build
      uses: mikehardy/buildcache-action@v1
      with:
        cache_key: ${{ runner.os }}-${{ matrix.config.arch }}-build-main-buildcache
    - name: cmake cache args
      id: cmake-cache-args
      if: startsWith(github.ref, 'refs/tags/v') != true
      run: >
        echo "CMAKE_CACHE_ARGS=-DCMAKE_C_COMPILER_LAUNCHER=buildcache -DCMAKE_CXX_COMPILER_LAUNCHER=buildcache
        -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON" | Out-File -FilePath $env:GITHUB_ENV 
        -Encoding utf8 -Append
    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.config.arch }}
    - name: configure
      run: >
        cmake -G "Ninja" -DBUILD_GEN=ON -DBUILD_TEST=ON 
        -DBUILD_NET=ON -DBoost_USE_STATIC_LIBS=ON -DBUILD_PYTHON=ON 
        -DBUILD_PYTHON_WHEEL=ON -DBUILD_PYTHON3=ON -DBUILD_PYTHON3_WHEEL=ON -DBUILD_JAVA=ON 
        -DPYTHON_EXECUTABLE="${{ env.PYTHON2_EXE }}"
        -DPYTHON3_EXECUTABLE="${{ env.PYTHON3_EXE }}" -DROBOTRACONTEUR_VERSION_SUFFIX="${{ env.version_suffix }}"
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DVCPKG_TARGET_TRIPLET=${{ matrix.config.vcpkg_triplet }}
        ${{ env.CMAKE_CACHE_ARGS }}
        -DCMAKE_BUILD_TYPE=Release
        -S robotraconteur -B build2
    - name: build
      working-directory: build2
      run: |
        cmake --build . --config Release -j 4
    - name: test
      if: ${{ matrix.config.arch != 'x86' }}
      working-directory: build2
      run: |
        ctest . -C Release --output-on-failure
    - name: test x86
      if: ${{ matrix.config.arch == 'x86' }}
      working-directory: build2
      run: |
        ctest . -C Release --output-on-failure -E java
    - name: move out
      run: |
        copy build2/rrversion.txt build2/out/
        copy robotraconteur/LICENSE.txt build2/out/
        mv build2/out .
    - name: archive out
      uses: actions/upload-artifact@v2
      with:
        name: 'out-win-${{ matrix.config.arch }}'
        path: out/*
    - name: build artifacts
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: 'build-artifacts-win-${{ matrix.config.arch }}'
        path: build2/*
        retention-days: 2    

  build-osx:

    runs-on: macos-10.15
    env:
      LIBRARY_PATH: /usr/local/opt/icu4c/lib
    steps:
    - uses: actions/checkout@v2
      with:
        path: robotraconteur
    - name: brew
      run: |
        brew update
        brew install swig boost openssl
    - name: install pip
      run: |
        sudo /usr/bin/easy_install pip==19.3.1
        sudo /usr/bin/python -m pip install --upgrade pip
    - name: pip
      run: |
        /usr/bin/python -m pip install setuptools wheel
    - name: env python2
      run: echo "PYTHON2_EXE=/usr/bin/python" >> $GITHUB_ENV
    - uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: x64
    - name: pip3
      run: |
        python -m pip install numpy setuptools wheel
    - name: env python3
      run: echo "PYTHON3_EXE=${{ env.pythonLocation }}/bin/python" >> $GITHUB_ENV
    - name: cache-build
      if: startsWith(github.ref, 'refs/tags/v') != true
      id: cache-build
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ runner.os }}-build-main-ccache
    - name: cmake cache args
      id: cmake-cache-args
      if: startsWith(github.ref, 'refs/tags/v') != true
      run: >
        echo "CMAKE_CACHE_ARGS=-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON" >> $GITHUB_ENV
    - name: configure
      run: >
        cmake -G "Unix Makefiles" -DBUILD_GEN=ON  -DBUILD_TEST=ON -DBUILD_PYTHON3=ON -DBUILD_PYTHON3_WHEEL=ON 
        -DBoost_USE_STATIC_LIBS=ON -DCMAKE_BUILD_TYPE=Release 
        -DBUILD_JAVA=ON -DBUILD_NET=ON -DPACKAGE_SWIG_SOURCE_ALL=ON 
        -DBUILD_PYTHON=ON -DBUILD_PYTHON_WHEEL=ON -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl
        -DOPENSSL_USE_STATIC_LIBS=ON -DPYTHON_EXECUTABLE="${{ env.PYTHON2_EXE }}"
        -DPYTHON3_EXECUTABLE="${{ env.PYTHON3_EXE }}" -DROBOTRACONTEUR_VERSION_SUFFIX="${{ env.version_suffix }}"
        ${{ env.CMAKE_CACHE_ARGS }}
        -S robotraconteur -B build2
    - name: build
      working-directory: build2
      run: |        
        cmake --build . --config Release -j 4
    - name: test
      working-directory: build2
      run: |
        ctest . -C Release --output-on-failure
    - name: move out
      run: |
        cp build2/rrversion.txt build2/out/
        cp robotraconteur/LICENSE.txt build2/out/
        mv build2/out .
    - name: archive out
      uses: actions/upload-artifact@v2
      with:
        name: 'out-osx'
        path: out/*
    - name: build artifacts
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: 'build-artifacts-osx'
        path: build2/*
        retention-days: 2  
    
  build-matlab:

    runs-on: ubuntu-18.04
    env:
      DEBIAN_FRONTEND: noninteractive
    steps:
    - uses: actions/checkout@v2
      with:
        path: robotraconteur
    - name: apt update
      run: sudo apt update
    - name: apt
      run: >
        sudo apt-get install zlib1g zlib1g-dev libssl-dev libusb-1.0-0 
        libusb-1.0-0-dev libdbus-1-3 libdbus-1-dev libbluetooth3 libbluetooth-dev 
        git cmake g++ make mono-devel -qq
    - name: Set up MATLAB
      uses: matlab-actions/setup-matlab@v1
      with:
        release: R2020a
    - name: checkout vcpkg
      uses: actions/checkout@v2
      with:
        path: vcpkg
        repository: microsoft/vcpkg
    - name: cache-vcpkg-archives
      if: startsWith(github.ref, 'refs/tags/v') != true
      id: cache-vcpkg-archives
      uses: actions/cache@v2
      with:
        path: /home/runner/.cache/vcpkg/archives
        key: ${{ runner.os }}-matlab-vcpkg-${{ hashFiles('vcpkg/ports/boost-config/*') }}-${{ hashFiles('vcpkg/ports/openssl/*') }}-main
    - name: bootstrap vcpkg
      working-directory: vcpkg
      run: ./bootstrap-vcpkg.sh
    - name: vcpkg
      working-directory: vcpkg
      run: >
        vcpkg install boost-algorithm boost-array boost-asio boost-assign boost-atomic
        boost-bind boost-config boost-container boost-date-time boost-smart-ptr 
        boost-filesystem boost-foreach boost-format boost-function boost-interprocess
        boost-intrusive boost-lexical-cast boost-locale boost-random boost-range boost-regex
        boost-scope-exit boost-signals2 boost-thread boost-tuple boost-unordered 
        boost-utility boost-uuid boost-program-options
    - name: cache-build
      if: startsWith(github.ref, 'refs/tags/v') != true
      id: cache-build
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ runner.os }}-matlab-build-main-ccache
    - name: cmake cache args
      id: cmake-cache-args
      if: startsWith(github.ref, 'refs/tags/v') != true
      run: >
        echo "CMAKE_CACHE_ARGS=-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON" >> $GITHUB_ENV
    - name: configure
      run: >
        cmake -G "Unix Makefiles" -DBUILD_GEN=ON  -DBUILD_TEST=ON 
        -DBoost_USE_STATIC_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_MATLAB_MEX=ON
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        ${{ env.CMAKE_CACHE_ARGS }}
        -S robotraconteur -B build2
    - name: build
      working-directory: build2
      run: |
        cmake --build . --config Release -j 4
    - name: test
      working-directory: build2
      run: |
        ctest . -C Release --output-on-failure
    - name: matlab out tar
      run: >
         export RR_VER=`cat build2/rrversion.txt` 
         && tar -cf build2/out/RobotRaconteur-$RR_VER-MATLAB-glnxa64.tar.gz 
         --transform "flags=r;s|^build2/out/Matlab|RobotRaconteur-$RR_VER-MATLAB-glnxa64|" 
         --transform "flags=r;s|^robotraconteur|RobotRaconteur-$RR_VER-MATLAB-glnxa64|" 
         build2/out/Matlab robotraconteur/LICENSE.txt
    - name: move out
      run: |
        cp robotraconteur/LICENSE.txt build2/out/
        cp build2/rrversion.txt build2/out/
        mv build2/out .
    - name: archive out
      uses: actions/upload-artifact@v2
      with:
        name: 'out-matlab'
        path: out/*
    - name: build artifacts
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: 'build-artifacts-matlab'
        path: build2/*
        retention-days: 2  
    
  build-win-python:
    runs-on: windows-2016
    strategy:
      matrix:
        config:
          - arch: x64
            vcpkg_triplet: x64-windows-static-md
            cmake_arch: x64
          - arch: x86
            vcpkg_triplet: x86-windows-static-md
            cmake_arch: Win32
        python_version: [3.7,3.9]
    steps:
    - uses: actions/checkout@v2
      with:
        path: robotraconteur
    - uses: actions/setup-python@v2
      with:
        python-version: '${{ matrix.python_version }}'
        architecture: ${{ matrix.config.arch }}
    - name: checkout vcpkg
      uses: actions/checkout@v2
      with:
        path: vcpkg
        repository: microsoft/vcpkg
    - name: cache-vcpkg-archives
      if: startsWith(github.ref, 'refs/tags/v') != true
      id: cache-vcpkg-archives
      uses: actions/cache@v2
      with:
        path: C:\Users\runneradmin\AppData\Local\vcpkg\archives
        key: ${{ runner.os }}-${{ matrix.config.arch }}-${{ hashFiles('vcpkg/ports/boost-config/*') }}-${{ hashFiles('vcpkg/ports/openssl/*') }}-vcpkg-build-python-version
    - name: bootstrap vcpkg
      working-directory: vcpkg
      run: bootstrap-vcpkg.bat
    - name: vcpkg
      working-directory: vcpkg
      run: >
        vcpkg install --triplet ${{ matrix.config.vcpkg_triplet }} boost-algorithm boost-array boost-asio 
        boost-assign boost-atomic boost-bind boost-config boost-container boost-date-time 
        boost-smart-ptr boost-filesystem boost-foreach boost-format boost-function boost-interprocess
        boost-intrusive boost-lexical-cast boost-locale boost-random boost-range boost-regex
        boost-scope-exit boost-signals2 boost-thread boost-tuple boost-unordered 
        boost-utility boost-uuid boost-program-options
    - name: pip3
      run: |
        python -m pip install numpy setuptools wheel
    - name: env python3
      run: echo  ("PYTHON3_EXE=" + (Get-Command Python.exe).Path) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - name: choco
      run: |
        choco install swig -r
    - name: cache-build
      if: startsWith(github.ref, 'refs/tags/v') != true
      id: cache-build
      uses: mikehardy/buildcache-action@v1
      with:
        cache_key: ${{ runner.os }}-${{ matrix.config.arch }}-build-python-version-${{ matrix.python_version }}-buildcache
    - name: cmake cache args
      id: cmake-cache-args
      if: startsWith(github.ref, 'refs/tags/v') != true
      run: >
        echo "CMAKE_CACHE_ARGS=-DCMAKE_C_COMPILER_LAUNCHER=buildcache -DCMAKE_CXX_COMPILER_LAUNCHER=buildcache
        -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON" | Out-File -FilePath $env:GITHUB_ENV 
        -Encoding utf8 -Append
    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.config.arch }}
    - name: configure
      run: >
        cmake -G "Ninja"
        -DBoost_USE_STATIC_LIBS=ON
        -DBUILD_PYTHON3=ON -DBUILD_PYTHON3_WHEEL=ON        
        -DPYTHON3_EXECUTABLE="${{ env.PYTHON3_EXE }}"
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DVCPKG_TARGET_TRIPLET=${{ matrix.config.vcpkg_triplet }}
        ${{ env.CMAKE_CACHE_ARGS }}
        -DCMAKE_BUILD_TYPE=Release
        -S robotraconteur -B build2
    - name: build
      working-directory: build2
      run: |
        cmake --build . --config Release -j 4
    - name: test
      working-directory: build2
      run: |
        ctest . -C Release --output-on-failure
    - name: move out
      run: |
        mv build2/out .
    - name: archive out
      uses: actions/upload-artifact@v2
      with:
        name: 'out-win-${{ matrix.config.arch }}-python-${{ matrix.python_version }}'
        path: out/*
    - name: build artifacts
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: 'build-artifacts-win-${{ matrix.config.arch }}-python-${{ matrix.python_version }}'
        path: build2/*
        retention-days: 2 

  build-osx-python:

    runs-on: macos-10.15
    env:
      LIBRARY_PATH: /usr/local/opt/icu4c/lib
    strategy:
      matrix:
        python_version: [3.7,3.9]
    steps:
    - uses: actions/checkout@v2
      with:
        path: robotraconteur
    - name: brew
      run: |
        brew install swig boost openssl
    - uses: actions/setup-python@v2
      with:
        python-version: '${{ matrix.python_version }}'
        architecture: x64
    - name: pip3
      run: |
        python -m pip install numpy setuptools wheel
    - name: env python3
      run: echo "PYTHON3_EXE=${{ env.pythonLocation }}/bin/python" >> $GITHUB_ENV
    - name: cache-build
      if: startsWith(github.ref, 'refs/tags/v') != true
      id: cache-build
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ runner.os }}-build-python-version-${{ matrix.python_version }}-ccache
    - name: cmake cache args
      id: cmake-cache-args
      if: startsWith(github.ref, 'refs/tags/v') != true
      run: >
        echo "CMAKE_CACHE_ARGS=-DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON" >> $GITHUB_ENV
    - name: configure
      run: >
        cmake -G "Xcode" -DBUILD_GEN=ON  -DBUILD_PYTHON3=ON -DBUILD_PYTHON3_WHEEL=ON 
        -DBoost_USE_STATIC_LIBS=ON -DCMAKE_BUILD_TYPE=Release        
        -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl
        -DOPENSSL_USE_STATIC_LIBS=ON
        -DPYTHON3_EXECUTABLE="${{ env.PYTHON3_EXE }}"
        ${{ env.CMAKE_CACHE_ARGS }}
        -S robotraconteur -B build2
    - name: build
      working-directory: build2
      run: |        
        cmake --build . --config Release -j 4
    - name: test
      working-directory: build2
      run: |
        ctest . -C Release --output-on-failure
    - name: move out
      run: |
        mv build2/out .
    - name: archive out
      uses: actions/upload-artifact@v2
      with:
        name: 'out-osx-python-${{ matrix.python_version }}'
        path: out/*
    - name: build artifacts
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: 'build-artifacts-osx-python-${{ matrix.python_version }}'
        path: build2/*
        retention-days: 2  
  
  build-dist:
    needs:
    - build-ubuntu
    - build-win
    - build-osx
    - build-matlab
    - build-win-python
    - build-osx-python
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        path: robotraconteur
    - uses: nuget/setup-nuget@v1
    - name: Download CI artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts/main
    - name: collect source
      run: python robotraconteur/packaging/scripts/collect_source.py
    - name: collect wheels
      run: python robotraconteur/packaging/scripts/collect_wheels.py
    - name: collect matlab
      run: python robotraconteur/packaging/scripts/collect_matlab.py
    - name: build java zip
      run: python robotraconteur/packaging/scripts/build_java_zip.py
    - name: build nuget package
      run: python robotraconteur/packaging/scripts/build_nuget_package.py
    - name: archive distfiles
      uses: actions/upload-artifact@v2
      with:
        name: 'distfiles'
        path: distfiles/*
    - name: make release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.BOT_GITHUB_TOKEN }}
        draft: true
        files: |
          distfiles/*
