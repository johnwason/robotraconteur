<?xml version="1.0"?>
<doc>
  <assembly>
    <name>RobotRaconteurNET</name>
  </assembly>
  <members>

    <!-- constants -->

    <member name="T:RobotRaconteur.DataTypes">
      <summary>
        Type codes for types supported by Robot Raconteur

        Data type codes are used in messages and service definition parsers.

        Data is always stored as little-endian, except for UUID which are big endian
      </summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.void_t">
      <summary>void or null type</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.double_t">
      <summary>IEEE-754 64-bit floating point number</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.single_t">
      <summary>IEEE-754 32-bit floating point number</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.int8_t">
      <summary>8-bit signed integer</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.uint8_t">
      <summary>8-bit unsigned integer</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.int16_t">
      <summary>16-bit signed integer</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.uint16_t">
      <summary>16-bit unsigned integer</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.int32_t">
      <summary>32-bit signed integer</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.uint32_t">
      <summary>32-bit unsigned integer</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.int64_t">
      <summary>64-bit signed integer</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.uint64_t">
      <summary>64-bit unsigned integer</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.string_t">
      <summary>UTF-8 string</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.cdouble_t">
      <summary>128-bit complex double (real,imag)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.csingle_t">
      <summary>64-bit complex float (real,imag)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.bool_t">
      <summary>8-bit boolean</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.structure_t">
      <summary>structure (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.vector_t">
      <summary>map with int32 key (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.dictionary_t">
      <summary>map with string key (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.object_t">
      <summary>object type (not serializable)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.varvalue_t">
      <summary>varvalue type (not serializable)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.varobject_t">
      <summary>varobject type (not serializable)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.list_t">
      <summary>list type (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.pod_t">
      <summary>pod type (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.pod_array_t">
      <summary>pod array type (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.pod_multidimarray_t">
      <summary>pod multidimarray type (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.enum_t">
      <summary>enum type (not serializable uses int32 for messages)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.namedtype_t">
      <summary>namedtype definition (not serializable)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.namedarray_t">
      <summary>namedarray type (not serializable)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.namedarray_array_t">
      <summary>namedarray array type (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.namedarray_multidimarray_t">
      <summary>namedarray multidimarray type (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.multidimarray_t">
      <summary>multi-dimensional numeric array (nested message type)</summary>
    </member>


    <member name="T:RobotRaconteur.DataTypes_ArrayTypes">
      <summary>
        Array type enum for TypeDefinition parser class
      </summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes_ArrayTypes.ArrayTypes_none">
      <summary>type is not an array</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes_ArrayTypes.ArrayTypes_array">
      <summary>type is a single dimensional array</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes_ArrayTypes.ArrayTypes_multidimarray">
      <summary>type is a multidimensional array</summary>
    </member>


    <member name="T:RobotRaconteur.DataTypes_ContainerTypes">
      <summary>
        Container type enum for TypeDefinition parser class
      </summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes_ContainerTypes.ContainerTypes_none">
      <summary>type does not have a container</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes_ContainerTypes.ContainerTypes_list">
      <summary>type has a list container</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes_ContainerTypes.ContainerTypes_map_int32">
      <summary>type has a map with int32 keys container</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes_ContainerTypes.ContainerTypes_map_string">
      <summary>type has a map with string keys container</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes_ContainerTypes.ContainerTypes_generator">
      <summary>type has a generator container. Only valid for use with function generator members</summary>
    </member>

    <member name="T:RobotRaconteur.RobotRaconteurNET">
      <summary>
        Global RobotRaconteurNET functions
      </summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_ROUTING_INFO">
      <summary>Message contains ROUTING_INFO section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_ENDPOINT_INFO">
      <summary>Message contains ENDPOINT_INFO section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_PRIORITY">
      <summary>Message contains PRIORITY section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_UNRELIABLE">
      <summary>Message is unreliable and may be dropped</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_META_INFO">
      <summary>Message contains META_INFO section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_STRING_TABLE">
      <summary>Message contains STRING_TABLE section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_MULTIPLE_ENTRIES">
      <summary>Message contains MULTIPLE_ENTRIES section. If unset, message contains one entry</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_EXTENDED">
      <summary>Message contains EXTENDED section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_Version2Compat">
      <summary>Message flags for compatibility with Message Format Version 2</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_SERVICE_PATH_STR">
      <summary>MessageEntry contains SERVICE_PATH_STR section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_SERVICE_PATH_CODE">
      <summary>MessageEntry contains SERVICE_PATH_CODE section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_MEMBER_NAME_STR">
      <summary>MessageEntry contains MEMBER_NAME_STR section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_MEMBER_NAME_CODE">
      <summary>MessageEntry contains MEMBER_NAME_CODE section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_REQUEST_ID">
      <summary>MessageEntry contains REQUEST_ID section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_ERROR">
      <summary>MessageEntry contains ERROR section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_META_INFO">
      <summary>MessageEntry contains META_INFO section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_EXTENDED">
      <summary>MessageEntry contains EXTENDED section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_Version2Compat">
      <summary>MessageEntry flags for compatibility with Message Format Version 2</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageElementFlags_ELEMENT_NAME_STR">
      <summary>MessageElement contains ELEMENT_NAME_STR section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageElementFlags_ELEMENT_NAME_CODE">
      <summary>MessageElement contains ELEMENT_NAME_CODE section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageElementFlags_ELEMENT_NUMBER">
      <summary>MessageElement contains ELEMENT_NUMBER section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageElementFlags_ELEMENT_TYPE_NAME_STR">
      <summary>MessageElement contains ELEMENT_TYPE_NAME_STR section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageElementFlags_ELEMENT_TYPE_NAME_CODE">
      <summary>MessageElement contains ELEMENT_TYPE_NAME_CODE section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageElementFlags_META_INFO">
      <summary>MessageElement contains META_INFO section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageElementFlags_EXTENDED">
      <summary>MessageElement contains EXTENDED section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageElementFlags_Version2Compat">
      <summary>MessageElement flags for compatibility with Message Format Version 2</summary>
    </member>

    <member name="F:RobotRaconteur.RobotRaconteurNET.RR_VALUE_LIFESPAN_INFINITE">
      <summary>Set wire values to have infinite lifespan and will not expire</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.TranspartCapabilityCode_PAGE_MASK">
      <summary>Page mask for transport capability code</summary>
    </member>
    <member
      name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE2_BASIC_PAGE">
      <summary>Message Version 2 transport capability page code</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE2_BASIC_ENABLE">
      <summary>Enable Message Version 2 transport capability flag</summary>
    </member>
    <member
      name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE2_BASIC_CONNECTCOMBINED">
      <summary>Enable Message Version 2 connect combined transport capability flag</summary>
    </member>
    <member
      name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE4_BASIC_PAGE">
      <summary>Message Version 4 transport capability page code</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE4_BASIC_ENABLE">
      <summary>Enable Message Version 4 transport capability flag</summary>
    </member>
    <member
      name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE4_BASIC_CONNECTCOMBINED">
      <summary>Enable Message Version 4 connect combine transport capability flag</summary>
    </member>
    <member
      name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE4_STRINGTABLE_PAGE">
      <summary>Message Version 4 String Table capability page code</summary>
    </member>
    <member
      name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE4_STRINGTABLE_ENABLE">
      <summary>Enable Message Version 4 String Table transport capability code</summary>
    </member>
    <member
      name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE4_STRINGTABLE_MESSAGE_LOCAL2">
      <summary>Enable Message Version 4 local String Table capability code</summary>
    </member>
    <member
      name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE4_STRINGTABLE_STANDARD_TABLE4">
      <summary>Enable Message Version 4 standard String Table capability code</summary>
    </member>


    <member name="T:RobotRaconteur.MessageEntryType">
      <summary>
        Message entry type codes

        Message entries are sent between nodes stored in messages, and represent
        requests, responses, or packets. The type of the entry is specified through
        the message entry type code. These type codes are similar to op-codes. This
        enum contains the defined entry type codes.

        Odd codes represent requests or packets, even codes
        represent responses.

        Entry types less than 500 are considered "special requests" that can be used
        before a session is established.
      </summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.Null">
      <summary>no-op</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.StreamOp">
      <summary>Stream operation request (transport only)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.StreamOpRet">
      <summary>Stream operation response (transport only)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.StreamCheckCapability">
      <summary>Stream check capability request (transport only)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.StreamCheckCapabilityRet">
      <summary>Stream check capability response (transport only)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.GetServiceDesc">
      <summary>Get service definition request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.GetServiceDescRet">
      <summary>Get service definition response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ObjectTypeName">
      <summary>Get object qualified type name request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ObjectTypeNameRet">
      <summary>Get object qualified type name response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ServiceClosed">
      <summary>Service closed notification packet</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ServiceClosedRet">
      <summary>(reserved)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ConnectClient">
      <summary>Connect client request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ConnectClientRet">
      <summary>Connect client response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.DisconnectClient">
      <summary>Disconnect client request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.DisconnectClientRet">
      <summary>Disconnect client response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ConnectionTest">
      <summary>Ping request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ConnectionTestRet">
      <summary>Pong response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.GetNodeInfo">
      <summary>Get node information request (NodeID and NodeName)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.GetNodeInfoRet">
      <summary>Get node information response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ReconnectClient">
      <summary>(reserved)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ReconnectClientRet">
      <summary>(reserved)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.NodeCheckCapability">
      <summary>Get node capability request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.NodeCheckCapabilityRet">
      <summary>Get node capability response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.GetServiceAttributes">
      <summary>Get service attributes request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.GetServiceAttributesRet">
      <summary>Get service attributes response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ConnectClientCombined">
      <summary>Connect client combined operation request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ConnectClientCombinedRet">
      <summary>Connect client combined operation response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.EndpointCheckCapability">
      <summary>Get endpoint capability request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.EndpointCheckCapabilityRet">
      <summary>Get endpoint capabalitiy response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ServiceCheckCapabilityReq">
      <summary>Get service capability request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ServiceCheckCapabilityRet">
      <summary>Get service capability response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ClientKeepAliveReq">
      <summary>Client keep alive request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ClientKeepAliveRet">
      <summary>Client keep alive response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ClientSessionOpReq">
      <summary>Client session management operation request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ClientSessionOpRet">
      <summary>Client session management operation response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ServicePathReleasedReq">
      <summary>Service path released event notification packet</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ServicePathReleasedRet">
      <summary>(reserved)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PropertyGetReq">
      <summary>Property member get request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PropertyGetRes">
      <summary>Property member get response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PropertySetReq">
      <summary>Property member set request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PropertySetRes">
      <summary>Property member set response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.FunctionCallReq">
      <summary>Function member call request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.FunctionCallRes">
      <summary>Function member call response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.GeneratorNextReq">
      <summary>Generater next call request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.GeneratorNextRes">
      <summary>Generater next call response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.EventReq">
      <summary>Event member notification</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.EventRes">
      <summary>(reserved)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PipePacket">
      <summary>Pipe member packet</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PipePacketRet">
      <summary>Pipe member packet ack</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PipeConnectReq">
      <summary>Pipe member connect request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PipeConnectRet">
      <summary>Pipe member connect response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PipeDisconnectReq">
      <summary>Pipe member close request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PipeDisconnectRet">
      <summary>Pipe member close response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PipeClosed">
      <summary>Pipe member closed event notification packet</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PipeClosedRet">
      <summary>(reserved)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.CallbackCallReq">
      <summary>Callback member call request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.CallbackCallRet">
      <summary>Callback member call response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WirePacket">
      <summary>Wire member value packet</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WirePacketRet">
      <summary>(reserved)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WireConnectReq">
      <summary>Wire member connect request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WireConnectRet">
      <summary>Wire member connect response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WireDisconnectReq">
      <summary>Wire member close request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WireDisconnectRet">
      <summary>Wire member close response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WireClosed">
      <summary>Wire member closed event notification packet</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WireClosedRet">
      <summary>(reserved)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.MemoryRead">
      <summary>Memory member read request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.MemoryReadRet">
      <summary>Memory member read response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.MemoryWrite">
      <summary>Memory member write request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.MemoryWriteRet">
      <summary>Memory member write response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.MemoryGetParam">
      <summary>Memory member get param request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.MemoryGetParamRet">
      <summary>Memory member get param response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WirePeekInValueReq">
      <summary>Wire member peek InValue request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WirePeekInValueRet">
      <summary>Wire member peek InValue response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WirePeekOutValueReq">
      <summary>Wire member peek OutValue request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WirePeekOutValueRet">
      <summary>Wire member peek OutValue response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WirePokeOutValueReq">
      <summary>Wire member poke OutValue request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WirePokeOutValueRet">
      <summary>Wire member poke OutValue response</summary>
    </member>

    <member name="T:RobotRaconteur.MessageErrorType">
      <summary>
        Message error type codes enum
      </summary>
    </member>

    <member name="F:RobotRaconteur.MessageErrorType.None">
      <summary>success</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ConnectionError">
      <summary>connection error</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ProtocolError">
      <summary>protocol error serializing messages</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ServiceNotFound">
      <summary>specified service not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ObjectNotFound">
      <summary>specified object not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.InvalidEndpoint">
      <summary>specified endpoint not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.EndpointCommunicationFatalError">
      <summary>communication with specified endpoint failed</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.NodeNotFound">
      <summary>specified node not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ServiceError">
      <summary>service error</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.MemberNotFound">
      <summary>specified member not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.MemberFormatMismatch">
      <summary>message format incompatible with specified member</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.DataTypeMismatch">
      <summary>data type did not match expected type</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.DataTypeError">
      <summary>data type failure</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.DataSerializationError">
      <summary>failure serializing data type</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.MessageEntryNotFound">
      <summary>specified message entry not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.MessageElementNotFound">
      <summary>specified message element not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.UnknownError">
      <summary>unknown exception occurred check `error name`</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.InvalidOperation">
      <summary>invalid operation attempted</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.InvalidArgument">
      <summary>argument is invalid</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.OperationFailed">
      <summary>the requested operation failed</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.NullValue">
      <summary>invalid null value</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.InternalError">
      <summary>internal error</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.SystemResourcePermissionDenied">
      <summary>permission denied to a system resource</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.OutOfSystemResource">
      <summary>system resource has been exhausted</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.SystemResourceError">
      <summary>system resource error</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ResourceNotFound">
      <summary>a required resource was not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.IOError">
      <summary>input/output error</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.BufferLimitViolation">
      <summary>a buffer underrun/overrun has occurred</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ServiceDefinitionError">
      <summary>service definition parse or validation error</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.OutOfRange">
      <summary>attempt to access an out of range element</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.KeyNotFound">
      <summary>key not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.InvalidConfiguration">
      <summary>invalid configuration specified</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.InvalidState">
      <summary>invalid state</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.RemoteError">
      <summary>error occurred on remote node</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.RequestTimeout">
      <summary>request timed out</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ReadOnlyMember">
      <summary>attempt to write to a read only member</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.WriteOnlyMember">
      <summary>attempt to read a write only member</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.NotImplementedError">
      <summary>member not implemented</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.MemberBusy">
      <summary>member is busy try again</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ValueNotSet">
      <summary>value has not been set</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.AbortOperation">
      <summary>abort operation (generator only)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.OperationAborted">
      <summary>the operation has been aborted</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.StopIteration">
      <summary>stop generator iteration (generator only)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.OperationTimeout">
      <summary>the operation has timed out</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.OperationCancelled">
      <summary>the operation has been cancelled</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.AuthenticationError">
      <summary>authentication has failed</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ObjectLockedError">
      <summary>the object is locked by another user or session</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.PermissionDenied">
      <summary>permission to service object or resource denied</summary>
    </member>


    <member name="T:RobotRaconteur.ClientServiceListenerEventType">
      <summary>
        Enum of client listener events
      </summary>
    </member>

    <member name="F:RobotRaconteur.ClientServiceListenerEventType.ClientClosed">
      <summary>client has been closed</summary>
    </member>
    <member name="F:RobotRaconteur.ClientServiceListenerEventType.ClientConnectionTimeout">
      <summary>client connection has timed out</summary>
    </member>
    <member name="F:RobotRaconteur.ClientServiceListenerEventType.TransportConnectionConnected">
      <summary>client transport has been connected</summary>
    </member>
    <member name="F:RobotRaconteur.ClientServiceListenerEventType.TransportConnectionClosed">
      <summary>client transport connection has been closed or lost</summary>
    </member>
    <member name="F:RobotRaconteur.ClientServiceListenerEventType.ServicePathReleased">
      <summary>client has received notification that service path was released</summary>
    </member>

    <member name="T:RobotRaconteur.ServiceServiceListenerEventType">
      <summary>
        Enum of service listener events
      </summary>
    </member>

    <member name="F:RobotRaconteur.ServerServiceListenerEventType.ServiceClosed">
      <summary>service has been closed</summary>
    </member>
    <member name="F:RobotRaconteur.ServerServiceListenerEventType.ClientConnected">
      <summary>client has connected</summary>
    </member>
    <member name="F:RobotRaconteur.ServerServiceListenerEventType.ClientDisconnected">
      <summary>client has disconnected</summary>
    </member>

    <member name="T:RobotRaconteur.MemberDefinition_Direction">
      <summary>
        Member direction enum

        Use member modifiers to declare member direction (readonly,writeonly)
      </summary>
    </member>

    <member name="F:RobotRaconteur.MemberDefinition_Direction.Direction_both">
      <summary>member supports read and write</summary>
    </member>
    <member name="F:RobotRaconteur.MemberDefinition_Direction.Direction_readonly">
      <summary>member is readonly</summary>
    </member>
    <member name="F:RobotRaconteur.MemberDefinition_Direction.Directionwriteonly">
      <summary>member is writeonly</summary>
    </member>

    <member name="T:RobotRaconteur.MemberDefinition_NoLock">
      <summary>
        Member locking options enum

        Use member modifiers to declare lock options
      </summary>
    </member>

    <member name="F:RobotRaconteur.MemberDefinition_NoLock.NoLock_none">
      <summary>member cannot be accessed by other users/sessions when object is locked</summary>
    </member>
    <member name="F:RobotRaconteur.MemberDefinition_NoLock.NoLock_all">
      <summary>member can be accessed by other users/sessions when object is locked</summary>
    </member>
    <member name="F:RobotRaconteur.MemberDefinition_NoLock.NoLock_read">
      <summary>member can be read by other users/sessions when object is locked</summary>
    </member>

    <member name="T:RobotRaconteur.LogLevel">
      <summary>
        Log level enum

        Enum of possible log levels. Set log level using
        RobotRaconteurNode::SetLogLevel(),
        `ROBOTRACONTEUR_LOG_LEVEL` environmental variable, or
        `--robotraconteur-log-level` node setup command line option
      </summary>
    </member>

    <member name="F:RobotRaconteur.LogLevel.LogLevel_Trace">
      <summary>`trace` log level</summary>
    </member>
    <member name="F:RobotRaconteur.LogLevel.LogLevel_Debug">
      <summary>`debug` log level</summary>
    </member>
    <member name="F:RobotRaconteur.LogLevel.LogLevel_Info">
      <summary>`info` log level</summary>
    </member>
    <member name="F:RobotRaconteur.LogLevel.LogLevel_Warning">
      <summary>`warning` log level</summary>
    </member>
    <member name="F:RobotRaconteur.LogLevel.LogLevel_Error">
      <summary>`error` log level</summary>
    </member>
    <member name="F:RobotRaconteur.LogLevel.LogLevel_Fatal">
      <summary>`fatal` log level</summary>
    </member>
    <member name="F:RobotRaconteur.LogLevel.LogLevel_Disable">
      <summary>`disabled` log level</summary>
    </member>


    <member name="T:RobotRaconteur.LogComponent">
      <summary>
        Log component enum

        Log records contain the code of the component where
        the log record was generated
      </summary>
    </member>

    <member name="F:RobotRaconteur.LogComponent.LogComponent_Default">
      <summary>default component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Node">
      <summary>Robot Raconteur Node component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Transport">
      <summary>tranport component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Message">
      <summary>message or message serialization component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Client">
      <summary>client component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Service">
      <summary>service component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Member">
      <summary>member component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Pack">
      <summary>data message packing component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Unpack">
      <summary>data message unpacknig component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_ServiceDefinition">
      <summary>service definition parser component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Discovery">
      <summary>node/service discovery component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Subscription">
      <summary>subscription component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_NodeSetup">
      <summary>node setup component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Utility">
      <summary>utility component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_RobDefLib">
      <summary>service definition standard library component (external)</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_User">
      <summary>user component (external)</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_UserClient">
      <summary>user client component (external)</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_UserService">
      <summary>user service component (external)</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_ThirdParty">
      <summary>third party library component (external)</summary>
    </member>

    <!-- RobotRaconteurNode.h -->

    <member name="T:RobotRaconteur.RobotRaconteurObjectLockFlags">
      <summary>
        The type of object lock
      </summary>
    </member>
    <member name="F:RobotRaconteur.RobotRaconteurObjectLockFlags.CLIENT_LOCK">
      <summary>
        Client level lock

        Only the current client connection will have access
        to the locked object
      </summary>
    </member>
    <member name="F:RobotRaconteur.RobotRaconteurObjectLockFlags.USER_LOCK">
      <summary>
        User level lock

        The object will be accesible for all client connections
        authenticated by the current user
      </summary>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.RegisterTransport">
      <summary>
        Register a transport for use by the node
      </summary>
      <param name="transport">The transport to register</param>
      <returns>The transport internal id</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.SelectRemoteNodeURL">
      <summary>
        Select the "best" URL from a std::vector of candidates

        Service discovery will often return a list of candidate URLs to
        use to connect to a node. This function uses hueristics to select
        the "best" URL to use. The selection criteria ranks URLs in roughly
        the following order, lower number being better:

        1. "rr+intra" for IntraTransport
        2. "rr+local" for LocalTransport
        3. "rr+pci" or "rr+usb" for HardwareTransport
        4. "rrs+tcp://127.0.0.1" for secure TcpTransport loopback
        5. "rrs+tcp://[::1]" for secure TcpTransport IPv6 loopback
        6. "rrs+tcp://localhost" for secure TcpTransport loopback
        7. "rrs+tcp://[fe80" for secure TcpTransport link-local IPv6
        8. "rrs+tcp://" for any secure TcpTransport
        9. "rr+tcp://127.0.0.1" for TcpTransport loopback
        10. "rr+tcp://[::1]" for TcpTransport IPv6 loopback
        11. "rr+tcp://localhost" for TcpTransport loopback
        12. "rr+tcp://[fe80" for TcpTransport link-local IPv6
        13. "rr+tcp://" for any TcpTransport
      </summary>
      <param name="urls">The candidate URLs</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.UnregisterServiceType">
      <summary>
        Unregister a previously registered service type

        This function is not recommended as the results can be
        unpredicatle
      </summary>
      <param name="type">The type to unregister</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.IsServiceTypeRegistered">
      <summary>
        Check if a service type has been registered
      </summary>
      <param name="type">The name of the service type to check</param>
      <returns>true if registered, otherwise false</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.CloseService">
      <summary>
        Closes a previously registered service

        Services are automatically closed by Shutdown, so this function
        is rarely used.
      </summary>
      <param name="sname">The name of the service to close</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.CheckConnection">
      <summary>
        Check that the TransportConnection associated with an endpoint
        is connected
      </summary>
      <param name="endpoint">The LocalEndpoint identifier to check</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.Sleep">
      <summary>
        Sleeps for a specified duration

        Normally will sleep based on the system clock, but in certain
        circumstances will use simulation time
      </summary>
      <param name="duration">Duration to sleep in milliseconds</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.CreateRate">
      <summary>
        Create a Rate object

        Rate is used to stabilize periodic loops to a specified frequency

        This function will normally return a WallRate instance
      </summary>
      <param name="frequency">Frequency of loop in Hz</param>
      <returns>The new Rate object</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.CreateAutoResetEvent">
      <summary>
        Create an AutoResetEvent object

        Normally the AutoResetEvent will use the system clock for timeouts,
        but in certain circumstances will use simulation time
      </summary>
      <returns>The new AutoResetEvent object</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.CompareLogLevel">
      <summary>
        Test if the specified log level would be accepted
      </summary>
      <param name="log_level">Log level to test</param>
      <returns>true if the log would be accepted</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.LogMessage">
      <summary>
        Log a simple message using the current node

        The record will be sent to the configured log handler,
        or sent to std::cerr if none is configured

        If the level of the message is below the current log level
        for the node, the record will be ignored
      </summary>
      <param name="level">The level for the log message</param>
      <param name="message">The log message</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.LogRecord">
      <summary>
        Log a record to the node.

        The record will be sent to the configured log handler,
        or sent to stderr if none is configured

        If the level of the message is below the current log level
        for the node, it will be ignored
      </summary>
      <param name="record">The record to log</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.GetLogLevel">
      <summary>
        Get the current log level for the node

        Default level is "info"
      </summary>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.SetLogLevel">
      <summary>
        Set the log level for the node

        Set RobotRaconteur.RobotRaconteur_LogLevel_Disable to disable logging
      </summary>
      <param name="level">The desired log level</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.SetLogLevelFromString">
      <summary>
        Set the log level for the node from a string

        Must be one of the following values: DISABLE, FATAL, ERROR, WARNING, INFO, DEBUG, TRACE
        Defaults to WARNING
      </summary>
      <param name="level">The desired log level</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.SetLogLevelFromEnvVariable">
      <summary>
        Set the log level for the node from specified environmental variable

        Retrieves the specified environmental variable and sets the log level based
        on one of the following values: DISABLE, FATAL, ERROR, WARNING, INFO, DEBUG, TRACE

        If an invalid value or the variable does not exist, the log level is left unchanged.
      </summary>
      <param name="env_variable_name">The environmental variable to use. Defaults to
        `ROBOTRACONTEUR_LOG_LEVEL`</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.GetLogRecordHandler">
      <summary>
        Get the currently configured log record handler

        If null, records are sent to stderr
      </summary>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.SetLogRecordHandler">
      <summary>
        Set the handler for log records

        If handler is NULL, records are sent to stderr
      </summary>
      <param name="handler">The log record handler function</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.GetRegisteredServiceTypes">
      <summary>
        Return names of registered service types
      </summary>
      <returns>The registered service types</returns>
    </member>

    <member name="T:RobotRaconteur.ConnectionException">
      <summary>
        Exception thrown when connection to remote node fails

        This exception is thrown if a connection cannot be created,
        the connection fails, or the connection has been closed.
        Error code MessageErrorType_ConnectionError (1)
      </summary>
    </member>
    <member
      name="M:RobotRaconteur.ConnectionException.#ctor(System.String,System.String,System.Object)">
      <summary>
        Construct a ConnectionException
      </summary>
      <param name="message">Message for the user</param>
      <param name="sub_name">Optional error sub_name</param>
      <param name="param_">Optional error param</param>
    </member>

    <member name="T:RobotRaconteur.ProtocolException">
      <summary>
        Exception thrown when a protocol failure occurs on
        a tranport connection

        Error code MessageErrorType_ProtocolError (2)
      </summary>
    </member>
    <member
      name="M:RobotRaconteur.ProtocolException.#ctor(System.String,System.String,System.Object)">
      <summary>
        Construct a ProtocolException
      </summary>
      <param name="message">Message for the user</param>
      <param name="sub_name">Optional error sub_name</param>
      <param name="param_">Optional error param</param>
    </member>

    <member name="T:RobotRaconteur.ServiceNotFoundException">
      <summary>
        Exception thrown when a service cannot be found
        on a remote node

        Error code MessageErrorType_ServiceNotFound (3)
      </summary>
    </member>
    <member
      name="M:RobotRaconteur.ServiceNotFoundException.#ctor(System.String,System.String,System.Object)">
      <summary>
        Construct a ServiceNotFoundException
      </summary>
      <param name="message">Message for the user</param>
      <param name="sub_name">Optional error sub_name</param>
      <param name="param_">Optional error param</param>
    </member>

    <member name="T:RobotRaconteur.ObjectNotFoundException">
      <summary>
        Exception thrown when a service object cannot
        be found

        This error is thrown when a specified service path
        does not have an assosciate object. The object may
        have been released by the service, or the service
        path is invalid

        Error code MessageErrorType_ObjectNotFound (4)
      </summary>
    </member>
    <member
      name="M:RobotRaconteur.ObjectNotFoundException.#ctor(System.String,System.String,System.Object)">
      <summary>
        Construct a ObjectNotFoundException
      </summary>
      <param name="message">Message for the user</param>
      <param name="sub_name">Optional error sub_name</param>
      <param name="param_">Optional error param</param>
    </member>

    <member name="T:RobotRaconteur.InvalidEndpointException">
      <summary>
        Exception thrown when an attempt is made
        to send a message to an invalid endpoint

        Transports between two nodes terminate with a pair
        of endpoints, one in each node. If the client, service,
        service endpoint, or transport is destroyed, the endpoint
        will be deleted. This exception is thrown if the
        target endpoint is no longer available.

        Error code MessageErrorType_InvalidEndpoint (5)
      </summary>
    </member>
    <member
      name="M:RobotRaconteur.InvalidEndpointException.#ctor(System.String,System.String,System.Object)">
      <summary>
        Construct a InvalidEndpointException
      </summary>
      <param name="message">Message for the user</param>
      <param name="sub_name">Optional error sub_name</param>
      <param name="param_">Optional error param</param>
    </member>

    <member name="T:RobotRaconteur.EndpointCommunicationFatalException">
      <summary>
        Exception thrown when an attempt to send a
        message to an endpoint fails

        Transports between two nodes terminate with a pair
        of endpoints, one in each node. Messages are sent
        between endpoint pairs. If for some reason the endpoint
        cannot send (or receive) the message, this exception
        is thrown.

        Error code MessageErrorType_EndpointCommunicationFatalError (6)
      </summary>
    </member>
    <member
      name="M:RobotRaconteur.EndpointCommunicationFatalException.#ctor(System.String,System.String,System.Object)">
      <summary>
        Construct a EndpointCommunicationFatalException
      </summary>
      <param name="message">Message for the user</param>
      <param name="sub_name">Optional error sub_name</param>
      <param name="param_">Optional error param</param>
    </member>

    <member name="T:RobotRaconteur.NodeNotFoundException">
      <summary>
        Exception thrown if the specified node cannot be found

        When connecting to a service or sending a message, the NodeID
        and/or NodeName are specified. If the specified node
        cannot be found, this exception is thrown.

        Error code MessageErrorType_NodeNotFound (7)
      </summary>
    </member>
    <member
      name="M:RobotRaconteur.NodeNotFoundException.#ctor(System.String,System.String,System.Object)">
      <summary>
        Construct a NodeNotFoundException
      </summary>
      <param name="message">Message for the user</param>
      <param name="sub_name">Optional error sub_name</param>
      <param name="param_">Optional error param</param>
    </member>

    <member name="T:RobotRaconteur.ServiceException">
      <summary>
        Exception thrown when an exception occurs during
        an operation on a service

        ServiceException is a catch-all error for exceptions on services.
        See the message field for an explanation of the error that occured.

        Error code MessageErrorType_ServiceError (8)
      </summary>
    </member>
    <member
      name="M:RobotRaconteur.ServiceException.#ctor(System.String,System.String,System.Object)">
      <summary>
        Construct a ServiceException
      </summary>
      <param name="message">Message for the user</param>
      <param name="sub_name">Optional error sub_name</param>
      <param name="param_">Optional error param</param>
    </member>

    <member name="T:RobotRaconteur.MemberNotFoundException">
      <summary>
        Exception thrown when the specified object member is
        not found

        Service objects have member that are declared in a service definition.
        If an attempt is made to call a member that does not exist, this exception
        is thrown.

        Error code MessageErrorType_MemberNotFound (9)
      </summary>
    </member>
    <member
      name="M:RobotRaconteur.MemberNotFoundException.#ctor(System.String,System.String,System.Object)">
      <summary>
        Construct a MemberNotFoundException
      </summary>
      <param name="message">Message for the user</param>
      <param name="sub_name">Optional error sub_name</param>
      <param name="param_">Optional error param</param>
    </member>

    <member name="T:RobotRaconteur.MemberFormatMismatchException">
      <summary>
        Exception thrown when a request to a member has an
        invalid MessageEntryType or the wrong message elements

        Error code MessageErrorType_MemberFormatMismatch (10)
      </summary>
    </member>
    <member
      name="M:RobotRaconteur.MemberFormatMismatchException.#ctor(System.String,System.String,System.Object)">
      <summary>
        Construct a MemberFormatMismatchException
      </summary>
      <param name="message">Message for the user</param>
      <param name="sub_name">Optional error sub_name</param>
      <param name="param_">Optional error param</param>
    </member>

    <member name="T:RobotRaconteur.DataTypeMismatchException">
      <summary>
        Exception thrown when incorrect data is received
        by a member

        Make sure the provided data matches the expected data types

        Error code MessageErrorType_DataTypeMismatch (11)
      </summary>
    </member>
    <member
      name="M:RobotRaconteur.DataTypeMismatchException.#ctor(System.String,System.String,System.Object)">
      <summary>
        Construct a DataTypeMismatchException
      </summary>
      <param name="message">Message for the user</param>
      <param name="sub_name">Optional error sub_name</param>
      <param name="param_">Optional error param</param>
    </member>

    <member name="T:RobotRaconteur.DataTypeException">
      <summary>
        Exception thrown when unexpected or incompatible
        data is provided

        DataTypeException is sometimes thrown when there is a
        type mismatch instead of DataTypeMismatchException

        Make sure the provided data matches the expected data types

        Error code MessageErrorType_DataTypeError (12)
      </summary>
    </member>
    <member
      name="M:RobotRaconteur.DataTypeException.#ctor(System.String,System.String,System.Object)">
      <summary>
        Construct a DataTypeException
      </summary>
      <param name="message">Message for the user</param>
      <param name="sub_name">Optional error sub_name</param>
      <param name="param_">Optional error param</param>
    </member>

    <member name="T:RobotRaconteur.DataSerializationException">
      <summary>
        Exception thrown when data cannot be serialized

        This exeception is thrown when the provide data cannot be serialized.
        This typically occurs inside a transport.

        Check that the provided data matches the types supported by
        the Robot Raconteur C++ library

        Error code MessageErrorType_DataSerializationError (13)
      </summary>
    </member>
    <member
      name="M:RobotRaconteur.DataSerializationException.#ctor(System.String,System.String,System.Object)">
      <summary>
        Construct a DataSerializationException
      </summary>
      <param name="message">Message for the user</param>
      <param name="sub_name">Optional error sub_name</param>
      <param name="param_">Optional error param</param>
    </member>

    <member name="T:RobotRaconteur.MessageEntryNotFoundException">
      <summary>
        Exception thrown when an expected MessageEntry
        is not found

        Error code MessageErrorType_MessageEntryNotfound (14)
      </summary>
    </member>
    <member
      name="M:RobotRaconteur.MessageEntryNotFoundException.#ctor(System.String,System.String,System.Object)">
      <summary>
        Construct a MessageEntryNotFoundException
      </summary>
      <param name="message">Message for the user</param>
      <param name="sub_name">Optional error sub_name</param>
      <param name="param_">Optional error param</param>
    </member>

    <member name="T:RobotRaconteur.MessageElementNotFoundException">
      <summary>
        Exception thrown wen an expected MessageElement
        is not found

        This exception is thrown when an expected field or parameter
        is not found.

        Error code MessageErrorType_MessageElementNotfound (15)
      </summary>
    </member>
    <member
      name="M:RobotRaconteur.MessageElementNotFoundException.#ctor(System.String,System.String,System.Object)">
      <summary>
        Construct a MessageElementNotFoundException
      </summary>
      <param name="message">Message for the user</param>
      <param name="sub_name">Optional error sub_name</param>
      <param name="param_">Optional error param</param>
    </member>

    <member name="T:RobotRaconteur.UnknownException">
      <summary>
        Exception representing an unknown exception type

        This exception is used to transmit exceptions that do not have a
        MessageErrorType code. Check the Error field for the name
        of the exception.

        Error code MessageErrorType_UnknownError (16)
      </summary>
    </member>
    <member
      name="M:RobotRaconteur.UnknownException.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>
        Construct a UnknownException
      </summary>
      <param name="error">The name of the exception</param>
      <param name="message">Message for the user</param>
      <param name="sub_name">Optional error sub_name</param>
      <param name="param_">Optional error param</param>
    </member>
  

  <member name="T:RobotRaconteur.InvalidOperationException">
    <summary>
      Exception thrown when an invalid operation is attempted

      Error code MessageErrorType_InvalidOperation (17)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.InvalidOperationException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a InvalidOperationException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.InvalidArgumentException">
    <summary>
      Exception thrown for an invalid argument

      Error code MessageErrorType_InvalidArgument (18)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.InvalidArgumentException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a InvalidArgumentException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.OperationFailedException">
    <summary>
      Exception thrown when an operation fails

      Error code MessageErrorType_OperationFailed (19)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.OperationFailedException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a OperationFailedException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.NullValueException">
    <summary>
      Exception thrown for an unexpected null value

      Error code MessageErrorType_NullValue (20)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.NullValueException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a NullValueException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.InternalErrorException">
    <summary>
      Exception thrown when an internal error has occurred

      Error code MessageErrorType_InternalError (21)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.InternalErrorException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a InternalErrorException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.PermissionDeniedException">
    <summary>
      Exception thrown when permission is denied to a service member

      Error code MessageErrorType_PermissionDenied (152)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.PermissionDeniedException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a PermissionDeniedException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.SystemResourcePermissionDeniedException">
    <summary>
      Exception thrown when permission to a system resource is denied

      Error code MessageErrorType_SystemResourcePermissionDenied (22)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.SystemResourcePermissionDeniedException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a SystemResourcePermissionDeniedException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.OutOfSystemResourceException">
    <summary>
      Exception thrown when a system resource has been exhausted

      Error code MessageErrorType_OutOfsystemResource (23)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.OutOfSystemResourceException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a OutOfSystemResourceException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.SystemResourceException">
    <summary>
      Exception thrown when a system resource error occurs

      Error code MessageErrorType_SystemResourceException (24)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.SystemResourceException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a SystemResourceException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.ResourceNotFoundException">
    <summary>
      Exception thrown when a system resource is not found

      Error code MessageErrorType_ResourceNotFound (25)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.ResourceNotFoundException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a ResourceNotFoundException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.IOException">
    <summary>
      Exception thrown when an input/output error occurs

      Error code MessageErrorType_IOError (26)
    </summary>
  </member>
  <member name="M:RobotRaconteur.IOException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a IOException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.BufferLimitViolationException">
    <summary>
      Exception thrown when a transport buffer limit is violated

      This exception typically occurs if there is a bug in
      serialization/deserialization, or the data stream
      has been corrupted

      Error code MessageErrorType_BufferLimitViolation (27)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.BufferLimitViolationException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a BufferLimitViolationException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.ServiceDefinitionException">
    <summary>
      Exception thrown when a service definition cannot be
      parsed or fails verification

      Error code MessageErrorType_ServiceDefinitionError (28)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.ServiceDefinitionException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a ServiceDefinitionException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.OutOfRangeException">
    <summary>
      Exception thrown when an attempt to acces an array or container
      index is out of range

      Error code MessageErrorType_OutOfRange (29)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.OutOfRangeException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a OutOfRangeException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.KeyNotFoundException">
    <summary>
      Exception thrown when a key is not found in a map

      Error code MessageErrorType_KeyNotFound (30)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.KeyNotFoundException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a KeyNotFoundException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.InvalidConfigurationException">
    <summary>
      Exception thrown when an invalid configuration is specified or encountered

      Error code MessageErrorType_InvalidConfiguration (31)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.InvalidConfigurationException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a InvalidConfigurationException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.InvalidStateException">
    <summary>
      Exception thrown when an invalid state is specified or encountered

      Error code MessageErrorType_InvalidState (32)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.InvalidStateException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a InvalidStateException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.RobotRaconteurRemoteException">
    <summary>
      Exception thrown when an error occurs on a remote
      member request

      User defined exceptions declared in service definitions extend
      RobotRaconteurRemoteException

      Error code MessageErrorType_RemoteError (100)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.RobotRaconteurRemoteException.#ctor(System.String,System.String,System.String,System.Object)">
    <summary>
      Construct a RobotRaconteurRemoteException

      error should be the fully qualified type of the exception
      for user defined exceptions
    </summary>
    <param name="error">The name of the exception</param>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.RequestTimeoutException">
    <summary>
      The request timed out

      See RobotRaconteurNode::SetRequestTimeout(),
      or the timeout passed to an asynchronous request

      Error code MessageErrorType_RequestTimeout (101)

    </summary>
  </member>
  <member
    name="M:RobotRaconteur.RequestTimeoutException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a RequestTimeoutException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.ReadOnlyMemberException">
    <summary>
      An attempt was made to write/set a read only member

      Error code MessageErrorType_ReadOnlyMember (102)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.ReadOnlyMemberException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a ReadOnlyMemberException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.WriteOnlyMemberException">
    <summary>
      An attempt was mode to read/get a write only member

      Error code MessageErrorType_WriteOnlyMember (103)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.WriteOnlyMemberException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a WriteOnlyMemberException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.NotImplementedException">
    <summary>
      Exception thrown if a member is not implemented

      Error code MessageErrorType_NotImplementedError (104)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.NotImplementedException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a NotImplementedException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.MemberBusyException">
    <summary>
      Thrown is a member is busy. Retry later

      Error code MessageErrorType_MemberBusy (105)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.MemberBusyException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a MemberBusyException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.ValueNotSetException">
    <summary>
      Exception thrown if a value has not been set

      This exception is most often used by WireConnection.GetInValue()
      and WireConnection.GetOutValue() if InValue or OutValue
      have not been received or set

      Error code MessageErrorType_ValueNotSet (106)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.ValueNotSetException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a ValueNotSetException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.AuthenticationException">
    <summary>
      Exception thrown when authentication is required or attempt
      to authenticate fails

      Error code MessageErrorType_AuthenticationError (150)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.AuthenticationException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a AuthenticationException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.ObjectLockedException">
    <summary>
      Exception thrown when attempting to access a locked
      service object

      Service objects can be locked using RobotRaconteurNode::RequestObjectLock().
      This exception is thrown if an attempt is made to access a service object
      (or sub-object) that has been locked by another user or session.

      Error code MessageErrorType_ObjectLockedError (151)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.ObjectLockedException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a ObjectLockedException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.AbortOperationException">
    <summary>
      Exception passed to generators to trigger an abort

      This is typically not thrown or received by the user

      Error code MessageErrorType_AbortOperation (107)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.AbortOperationException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a AbortOperationException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.OperationAbortedException">
    <summary>
      Exception thrown when an operation is aborted

      This is thrown be generator functions when Abort()
      is called

      Generators are destroyed after throwing
      OperationAbortedException during Next()

      This error is passed to generators to trigger an abort

      Error code MessageErrorType_OperationAborted (108)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.OperationAbortedException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a OperationAbortedException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.StopIterationException">
    <summary>
      Exception thrown when a generator has finished sending results

      StopIterationException is not an error condition. It signals
      that a generator is finished sending results.

      This error is passed to generators to trigger a close

      Error code MessageErrorType_StopIteration (109)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.StopIterationException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a StopIterationException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.OperationTimeoutException">
    <summary>
      Exception thrown when an operation does not complete in the expected time

      Error code MessageErrorType_OperationTimeout (110)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.OperationTimeoutException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a OperationTimeoutException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.OperationCancelledException">
    <summary>
      Exception thrown when an operation is cancelled before it is started

      Error code MessageErrorType_OperationCancelled (111)
    </summary>
  </member>
  <member
    name="M:RobotRaconteur.OperationCancelledException.#ctor(System.String,System.String,System.Object)">
    <summary>
      Construct a OperationCancelledException
    </summary>
    <param name="message">Message for the user</param>
    <param name="sub_name">Optional error sub_name</param>
    <param name="param_">Optional error param</param>
  </member>

  <member name="T:RobotRaconteur.RobotRaconteurNodeSetupFlags">
    <summary>
      Setup option flags

      Setup option flags passed to node setup classes to select options to enable
      and disable. Flags are used to configure the following types of options:

      1. Enable and disable transport types
      2. Modify transport options including discovery, security requirements, and connection
      listening
      3. Configure TLS behavior
      4. Enable local tap for logging

      Node setup classes also allow options and flags to be "overridden" using
      command line options. Use the `*_ALLOW_OVERRIDE` options to configure
      when these overrides are allowed.

      The ClientNodeSetup, ServerNodeSetup, and SecureServerNodeSetup
      are convenience classes for the most commonly used options.
    </summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.NONE">
    <summary>No options enabled</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.ENABLE_NODE_DISCOVERY_LISTENING">
    <summary>Enable node discovery listening on all transports</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.ENABLE_NODE_ANNOUNCE">
    <summary>Enable node announce on all transports</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.ENABLE_LOCAL_TRANSPORT">
    <summary>Enable LocalTransport</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.ENABLE_TCP_TRANSPORT">
    <summary>Enable TcpTransport</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.ENABLE_HARDWARE_TRANSPORT">
    <summary>Enable HardwareTransport</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.LOCAL_TRANSPORT_START_SERVER">
    <summary>Start the LocalTransport server to listen for incoming clients</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.LOCAL_TRANSPORT_START_CLIENT">
    <summary>Start the LocalTransport client with specified node name</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.TCP_TRANSPORT_START_SERVER">
    <summary>Start the TcpTransport server to listen for incoming clients on the specified port</summary>
  </member>
  <member
    name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.TCP_TRANSPORT_START_SERVER_PORT_SHARER">
    <summary>Start the TcpTransport server to incoming for incoming clients using the port sharer</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.DISABLE_MESSAGE4">
    <summary>Disable Message Format Version 4 on all transports</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.DISABLE_STRINGTABLE">
    <summary>Disable Message Format Version 4 string table on all transports</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.DISABLE_TIMEOUTS">
    <summary>Disable all timeouts (useful for debugging)</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.LOAD_TLS_CERT">
    <summary>Load the TLS certificate for TcpTransport</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.REQUIRE_TLS">
    <summary>Require TLS for all clients on TcpTransport</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.LOCAL_TRANSPORT_SERVER_PUBLIC">
    <summary>Make LocalTransport server listen for incoming clients from all users</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.NODENAME_OVERRIDE">
    <summary>Allow NodeName to be configured using command line options</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.NODEID_OVERRIDE">
    <summary>Allow NodeID to be configured using command line options</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.TCP_PORT_OVERRIDE">
    <summary>Allow TCP port to be configured using command line options</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.TCP_WEBSOCKET_ORIGIN_OVERRIDE">
    <summary>Allow TCP WebSocket origin control to be configured using command line options</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.ENABLE_INTRA_TRANSPORT">
    <summary>Enable IntraTransport</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.INTRA_TRANSPORT_START_SERVER">
    <summary>Start the IntraTransport server to listen for incoming clients</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.LOCAL_TAP_ENABLE">
    <summary>Enable the LocalTap debug logging system</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.LOCAL_TAP_NAME">
    <summary>Allow the user to set the LocalTap name</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.ENABLE_ALL_TRANSPORTS">
    <summary>Convenience flag to enable all transports</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.CLIENT_DEFAULT">
    <summary>Default configuration for client nodes (See ClientNodeSetup)</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.CLIENT_DEFAULT_ALLOWED_OVERRIDE">
    <summary>Default allowed overrides for client nodes (See ClientNodeSetup)</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.SERVER_DEFAULT">
    <summary>Default configuration for server nodes</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.SERVER_DEFAULT_ALLOWED_OVERRIDE">
    <summary>Default allowed overrides for server nodes</summary>
  </member>
  <member name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.SECURE_SERVER_DEFAULT">
    <summary>Default configuration for server nodes requiring TLS network transports</summary>
  </member>
  <member
    name="F:RobotRaconteur.RobotRaconteurNodeSetupFlags.SECURE_SERVER_DEFAULT_ALLOWED_OVERRIDE">
    <summary>Default allowed overrides for server nodes requiring TLS network transports</summary>
  </member>

  <member name="T:RobotRaconteur.CommandLineConfigParser">
    <summary>
      Command line parser for node setup classes

      The CommandLineConfigParser is used to parse command line options specified
      when a program is launched. These options allow for the node configuration to be
      changed without recompiling the software. See command_line_options for
      a table of the standard command line options.

      ClientNodeSetup, ServerNodeSetup, and SecureServerNodeSetup use this class to parse
      the `sys.argv` parameters. The RobotRaconteurNodeSetup constructors will accept
      either `sys.argv`, or will accept an initialize CommandLineConfigParser.

      The CommandLineConfig() constructor takes the "allowed override" flags, and the option prefix.
      The "allowed override" specifies which options can be overridden using the command line. The
      prefix option allows the command line flag prefix to be changed. By default it expects
      all options to begin with `--robotraconteur-` followed by the name of the option. If there are
      multiple nodes, it is necessary to change the prefix to be unique for each node. For instance,
      "robotraconteur1-" for the first node and "robotraconteur2-" for the second node.

      Users may add additional options to the parser. Use AddStringOption(),
      AddBoolOption(), or AddIntOption() to add additional options.
    </summary>
  </member>

  <member name="M:RobotRaconteur.CommandLineConfigParser.SetDefaults(System.String,System.UInt16,System.UInt32)">
    <summary>
      Set the default NodeName, TCP port, and flags

      The command line options will be allowed to override the options
      specified in allowed_overrides passed to CommandLineConfigParser().
    </summary>
    <param name="node_name">The default NodeName</param>
    <param name="tcp_port">The default TCP port</param>
    <param name="default_flags">The default flags</param>
  </member>

  <member name="M:RobotRaconteur.CommandLineConfigParser.AddStringOption(System.String,System.String)">
    <summary>
      Add a new string option
    </summary>
    <param name="name">The name of the option</param>
    <param name="descr">Description of the option</param>
  </member>

  <member name="M:RobotRaconteur.CommandLineConfigParser.AddBoolOption(System.String,System.String)">
    <summary>
      Add a new bool option
    </summary>
    <param name="name">The name of the option</param>
    <param name="descr">Description of the option</param>
  </member>

  <member name="M:RobotRaconteur.CommandLineConfigParser.AddIntOption(System.String,System.String)">
    <summary>
      Add a new int option
    </summary>
    <param name="name">The name of the option</param>
    <param name="descr">Description of the option</param>
  </member>

  <member name="M:RobotRaconteur.CommandLineConfigParser.ParseCommandLine(System.String[])">
    <summary>
      Parse a specified string vector containing the options

      Results are stored in the instance
    </summary>
    <param name="args">The options as a string list</param>
  </member>

  <member name="M:RobotRaconteur.CommandLineConfigParser.GetOptionOrDefaultAsString(System.String)">
    <summary>
      Get the option value as a string

      Returns empty string if option not specified on command line
    </summary>
    <param name="option">The name of the option</param>
    <returns>The option value, or an empty string</returns>
  </member>

  <member name="M:RobotRaconteur.CommandLineConfigParser.GetOptionOrDefaultAsString(System.String,System.String)">
    <summary>
      Get the option value as a string

      Returns default_value if option not specified on command line
    </summary>
    <param name="option">The name of the option</param>
    <param name="default_value">The default option value</param>
    <returns>The option value, or default_value if not specified on command line</returns>
  </member>

  <member name="M:RobotRaconteur.CommandLineConfigParser.GetOptionOrDefaultAsBool(System.String)">
    <summary>
      Get the option value as a bool

      Returns false if option not specified on command line
    </summary>
    <param name="option">The name of the option</param>
    <returns>The option value, or false</returns>
  </member>

  <member name="M:RobotRaconteur.CommandLineConfigParser.GetOptionOrDefaultAsBool(System.String,System.Boolean)">
    <summary>
      Get the option value as a bool

      Returns default_value if option not specified on command line
    </summary>
    <param name="option">The name of the option</param>
    <param name="default_value">The default option value</param>
    <returns>The option value, or default_value if not specified on command line</returns>
  </member>

  <member name="M:RobotRaconteur.CommandLineConfigParser.GetOptionOrDefaultAsInt(System.String)">
    <summary>
      Get the option value as an int

      Returns -1 if option not specified on command line
    </summary>
    <param name="option">The name of the option</param>
    <returns>The option value, or -1</returns>
  </member>

  <member name="M:RobotRaconteur.CommandLineConfigParser.GetOptionOrDefaultAsInt(System.String,System.Int32)">
    <summary>
      Get the option value as an int

      Returns default_value if option not specified on command line
    </summary>
    <param name="option">The name of the option</param>
    <param name="default_value">The default option value</param>
    <returns>The option value, or default_value if not specified on command line</returns>
  </member>

  <member name="M:RobotRaconteur.CommandLineConfigParser.#ctor(System.UInt32)">
    <summary>
      Construct a new CommandLineConfigParser
    </summary>
    <param name="allowed_overrides">The allowed overrides flags</param>
  </member>

  <member name="M:RobotRaconteur.CommandLineConfigParser.#ctor(System.UInt32,System.String)">
    <summary>
      Construct a new CommandLineConfigParser
    </summary>
    <param name="allowed_overrides">The allowed overrides flags</param>
    <param name="prefix">The prefix to use for the options</param>
  </member>
</members>

</doc>