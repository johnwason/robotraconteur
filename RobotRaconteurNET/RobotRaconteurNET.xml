<?xml version="1.0"?>
<doc>
  <assembly>
    <name>RobotRaconteurNET</name>
  </assembly>
  <members>

    <!-- constants -->

    <member name="T:RobotRaconteur.DataTypes">
      <summary>
        Type codes for types supported by Robot Raconteur

        Data type codes are used in messages and service definition parsers.

        Data is always stored as little-endian, except for UUID which are big endian
      </summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.void_t">
      <summary>void or null type</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.double_t">
      <summary>IEEE-754 64-bit floating point number</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.single_t">
      <summary>IEEE-754 32-bit floating point number</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.int8_t">
      <summary>8-bit signed integer</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.uint8_t">
      <summary>8-bit unsigned integer</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.int16_t">
      <summary>16-bit signed integer</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.uint16_t">
      <summary>16-bit unsigned integer</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.int32_t">
      <summary>32-bit signed integer</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.uint32_t">
      <summary>32-bit unsigned integer</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.int64_t">
      <summary>64-bit signed integer</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.uint64_t">
      <summary>64-bit unsigned integer</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.string_t">
      <summary>UTF-8 string</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.cdouble_t">
      <summary>128-bit complex double (real,imag)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.csingle_t">
      <summary>64-bit complex float (real,imag)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.bool_t">
      <summary>8-bit boolean</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.structure_t">
      <summary>structure (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.vector_t">
      <summary>map with int32 key (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.dictionary_t">
      <summary>map with string key (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.object_t">
      <summary>object type (not serializable)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.varvalue_t">
      <summary>varvalue type (not serializable)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.varobject_t">
      <summary>varobject type (not serializable)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.list_t">
      <summary>list type (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.pod_t">
      <summary>pod type (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.pod_array_t">
      <summary>pod array type (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.pod_multidimarray_t">
      <summary>pod multidimarray type (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.enum_t">
      <summary>enum type (not serializable uses int32 for messages)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.namedtype_t">
      <summary>namedtype definition (not serializable)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.namedarray_t">
      <summary>namedarray type (not serializable)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.namedarray_array_t">
      <summary>namedarray array type (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.namedarray_multidimarray_t">
      <summary>namedarray multidimarray type (nested message type)</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes.multidimarray_t">
      <summary>multi-dimensional numeric array (nested message type)</summary>
    </member>


    <member name="T:RobotRaconteur.DataTypes_ArrayTypes">
      <summary>
        Array type enum for TypeDefinition parser class
      </summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes_ArrayTypes.ArrayTypes_none">
      <summary>type is not an array</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes_ArrayTypes.ArrayTypes_array">
      <summary>type is a single dimensional array</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes_ArrayTypes.ArrayTypes_multidimarray">
      <summary>type is a multidimensional array</summary>
    </member>


    <member name="T:RobotRaconteur.DataTypes_ContainerTypes">
      <summary>
        Container type enum for TypeDefinition parser class
      </summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes_ContainerTypes.ContainerTypes_none">
      <summary>type does not have a container</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes_ContainerTypes.ContainerTypes_list">
      <summary>type has a list container</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes_ContainerTypes.ContainerTypes_map_int32">
      <summary>type has a map with int32 keys container</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes_ContainerTypes.ContainerTypes_map_string">
      <summary>type has a map with string keys container</summary>
    </member>
    <member name="F:RobotRaconteur.DataTypes_ContainerTypes.ContainerTypes_generator">
      <summary>type has a generator container. Only valid for use with function generator members</summary>
    </member>

    <member name="T:RobotRaconteur.RobotRaconteurNET">
      <summary>
        Global RobotRaconteurNET functions
      </summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_ROUTING_INFO">
      <summary>Message contains ROUTING_INFO section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_ENDPOINT_INFO">
      <summary>Message contains ENDPOINT_INFO section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_PRIORITY">
      <summary>Message contains PRIORITY section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_UNRELIABLE">
      <summary>Message is unreliable and may be dropped</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_META_INFO">
      <summary>Message contains META_INFO section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_STRING_TABLE">
      <summary>Message contains STRING_TABLE section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_MULTIPLE_ENTRIES">
      <summary>Message contains MULTIPLE_ENTRIES section. If unset, message contains one entry</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_EXTENDED">
      <summary>Message contains EXTENDED section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageFlags_Version2Compat">
      <summary>Message flags for compatibility with Message Format Version 2</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_SERVICE_PATH_STR">
      <summary>MessageEntry contains SERVICE_PATH_STR section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_SERVICE_PATH_CODE">
      <summary>MessageEntry contains SERVICE_PATH_CODE section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_MEMBER_NAME_STR">
      <summary>MessageEntry contains MEMBER_NAME_STR section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_MEMBER_NAME_CODE">
      <summary>MessageEntry contains MEMBER_NAME_CODE section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_REQUEST_ID">
      <summary>MessageEntry contains REQUEST_ID section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_ERROR">
      <summary>MessageEntry contains ERROR section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_META_INFO">
      <summary>MessageEntry contains META_INFO section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_EXTENDED">
      <summary>MessageEntry contains EXTENDED section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageEntryFlags_Version2Compat">
      <summary>MessageEntry flags for compatibility with Message Format Version 2</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageElementFlags_ELEMENT_NAME_STR">
      <summary>MessageElement contains ELEMENT_NAME_STR section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageElementFlags_ELEMENT_NAME_CODE">
      <summary>MessageElement contains ELEMENT_NAME_CODE section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageElementFlags_ELEMENT_NUMBER">
      <summary>MessageElement contains ELEMENT_NUMBER section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageElementFlags_ELEMENT_TYPE_NAME_STR">
      <summary>MessageElement contains ELEMENT_TYPE_NAME_STR section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageElementFlags_ELEMENT_TYPE_NAME_CODE">
      <summary>MessageElement contains ELEMENT_TYPE_NAME_CODE section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageElementFlags_META_INFO">
      <summary>MessageElement contains META_INFO section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageElementFlags_EXTENDED">
      <summary>MessageElement contains EXTENDED section</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.MessageElementFlags_Version2Compat">
      <summary>MessageElement flags for compatibility with Message Format Version 2</summary>
    </member>
    <member name="F:RobotRaconteur.RobotRaconteurNET.RR_TIMEOUT_INFINITE">
      <summary>Disable timeout for asynchronous operations</summary>
    </member>
    <member name="F:RobotRaconteur.RobotRaconteurNET.RR_VALUE_LIFESPAN_INFINITE">
      <summary>Set wire values to have infinite lifespan and will not expire</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.TranspartCapabilityCode_PAGE_MASK">
      <summary>Page mask for transport capability code</summary>
    </member>
    <member
      name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE2_BASIC_PAGE">
      <summary>Message Version 2 transport capability page code</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE2_BASIC_ENABLE">
      <summary>Enable Message Version 2 transport capability flag</summary>
    </member>
    <member
      name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE2_BASIC_CONNECTCOMBINED">
      <summary>Enable Message Version 2 connect combined transport capability flag</summary>
    </member>
    <member
      name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE4_BASIC_PAGE">
      <summary>Message Version 4 transport capability page code</summary>
    </member>
    <member name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE4_BASIC_ENABLE">
      <summary>Enable Message Version 4 transport capability flag</summary>
    </member>
    <member
      name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE4_BASIC_CONNECTCOMBINED">
      <summary>Enable Message Version 4 connect combine transport capability flag</summary>
    </member>
    <member
      name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE4_STRINGTABLE_PAGE">
      <summary>Message Version 4 String Table capability page code</summary>
    </member>
    <member
      name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE4_STRINGTABLE_ENABLE">
      <summary>Enable Message Version 4 String Table transport capability code</summary>
    </member>
    <member
      name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE4_STRINGTABLE_MESSAGE_LOCAL2">
      <summary>Enable Message Version 4 local String Table capability code</summary>
    </member>
    <member
      name="P:RobotRaconteur.RobotRaconteurNET.TransportCapabilityCode_MESSAGE4_STRINGTABLE_STANDARD_TABLE4">
      <summary>Enable Message Version 4 standard String Table capability code</summary>
    </member>


    <member name="T:RobotRaconteur.MessageEntryType">
      <summary>
        Message entry type codes

        Message entries are sent between nodes stored in messages, and represent
        requests, responses, or packets. The type of the entry is specified through
        the message entry type code. These type codes are similar to op-codes. This
        enum contains the defined entry type codes.

        Odd codes represent requests or packets, even codes
        represent responses.

        Entry types less than 500 are considered "special requests" that can be used
        before a session is established.
      </summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.Null">
      <summary>no-op</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.StreamOp">
      <summary>Stream operation request (transport only)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.StreamOpRet">
      <summary>Stream operation response (transport only)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.StreamCheckCapability">
      <summary>Stream check capability request (transport only)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.StreamCheckCapabilityRet">
      <summary>Stream check capability response (transport only)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.GetServiceDesc">
      <summary>Get service definition request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.GetServiceDescRet">
      <summary>Get service definition response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ObjectTypeName">
      <summary>Get object qualified type name request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ObjectTypeNameRet">
      <summary>Get object qualified type name response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ServiceClosed">
      <summary>Service closed notification packet</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ServiceClosedRet">
      <summary>(reserved)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ConnectClient">
      <summary>Connect client request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ConnectClientRet">
      <summary>Connect client response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.DisconnectClient">
      <summary>Disconnect client request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.DisconnectClientRet">
      <summary>Disconnect client response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ConnectionTest">
      <summary>Ping request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ConnectionTestRet">
      <summary>Pong response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.GetNodeInfo">
      <summary>Get node information request (NodeID and NodeName)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.GetNodeInfoRet">
      <summary>Get node information response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ReconnectClient">
      <summary>(reserved)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ReconnectClientRet">
      <summary>(reserved)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.NodeCheckCapability">
      <summary>Get node capability request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.NodeCheckCapabilityRet">
      <summary>Get node capability response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.GetServiceAttributes">
      <summary>Get service attributes request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.GetServiceAttributesRet">
      <summary>Get service attributes response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ConnectClientCombined">
      <summary>Connect client combined operation request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ConnectClientCombinedRet">
      <summary>Connect client combined operation response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.EndpointCheckCapability">
      <summary>Get endpoint capability request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.EndpointCheckCapabilityRet">
      <summary>Get endpoint capabalitiy response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ServiceCheckCapabilityReq">
      <summary>Get service capability request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ServiceCheckCapabilityRet">
      <summary>Get service capability response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ClientKeepAliveReq">
      <summary>Client keep alive request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ClientKeepAliveRet">
      <summary>Client keep alive response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ClientSessionOpReq">
      <summary>Client session management operation request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ClientSessionOpRet">
      <summary>Client session management operation response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ServicePathReleasedReq">
      <summary>Service path released event notification packet</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.ServicePathReleasedRet">
      <summary>(reserved)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PropertyGetReq">
      <summary>Property member get request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PropertyGetRes">
      <summary>Property member get response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PropertySetReq">
      <summary>Property member set request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PropertySetRes">
      <summary>Property member set response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.FunctionCallReq">
      <summary>Function member call request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.FunctionCallRes">
      <summary>Function member call response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.GeneratorNextReq">
      <summary>Generater next call request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.GeneratorNextRes">
      <summary>Generater next call response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.EventReq">
      <summary>Event member notification</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.EventRes">
      <summary>(reserved)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PipePacket">
      <summary>Pipe member packet</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PipePacketRet">
      <summary>Pipe member packet ack</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PipeConnectReq">
      <summary>Pipe member connect request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PipeConnectRet">
      <summary>Pipe member connect response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PipeDisconnectReq">
      <summary>Pipe member close request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PipeDisconnectRet">
      <summary>Pipe member close response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PipeClosed">
      <summary>Pipe member closed event notification packet</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.PipeClosedRet">
      <summary>(reserved)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.CallbackCallReq">
      <summary>Callback member call request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.CallbackCallRet">
      <summary>Callback member call response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WirePacket">
      <summary>Wire member value packet</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WirePacketRet">
      <summary>(reserved)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WireConnectReq">
      <summary>Wire member connect request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WireConnectRet">
      <summary>Wire member connect response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WireDisconnectReq">
      <summary>Wire member close request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WireDisconnectRet">
      <summary>Wire member close response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WireClosed">
      <summary>Wire member closed event notification packet</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WireClosedRet">
      <summary>(reserved)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.MemoryRead">
      <summary>Memory member read request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.MemoryReadRet">
      <summary>Memory member read response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.MemoryWrite">
      <summary>Memory member write request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.MemoryWriteRet">
      <summary>Memory member write response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.MemoryGetParam">
      <summary>Memory member get param request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.MemoryGetParamRet">
      <summary>Memory member get param response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WirePeekInValueReq">
      <summary>Wire member peek InValue request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WirePeekInValueRet">
      <summary>Wire member peek InValue response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WirePeekOutValueReq">
      <summary>Wire member peek OutValue request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WirePeekOutValueRet">
      <summary>Wire member peek OutValue response</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WirePokeOutValueReq">
      <summary>Wire member poke OutValue request</summary>
    </member>
    <member name="F:RobotRaconteur.MessageEntryType.WirePokeOutValueRet">
      <summary>Wire member poke OutValue response</summary>
    </member>

    <member name="T:RobotRaconteur.MessageErrorType">
      <summary>
        Message error type codes enum
      </summary>
    </member>

    <member name="F:RobotRaconteur.MessageErrorType.None">
      <summary>success</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ConnectionError">
      <summary>connection error</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ProtocolError">
      <summary>protocol error serializing messages</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ServiceNotFound">
      <summary>specified service not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ObjectNotFound">
      <summary>specified object not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.InvalidEndpoint">
      <summary>specified endpoint not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.EndpointCommunicationFatalError">
      <summary>communication with specified endpoint failed</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.NodeNotFound">
      <summary>specified node not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ServiceError">
      <summary>service error</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.MemberNotFound">
      <summary>specified member not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.MemberFormatMismatch">
      <summary>message format incompatible with specified member</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.DataTypeMismatch">
      <summary>data type did not match expected type</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.DataTypeError">
      <summary>data type failure</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.DataSerializationError">
      <summary>failure serializing data type</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.MessageEntryNotFound">
      <summary>specified message entry not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.MessageElementNotFound">
      <summary>specified message element not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.UnknownError">
      <summary>unknown exception occurred check `error name`</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.InvalidOperation">
      <summary>invalid operation attempted</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.InvalidArgument">
      <summary>argument is invalid</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.OperationFailed">
      <summary>the requested operation failed</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.NullValue">
      <summary>invalid null value</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.InternalError">
      <summary>internal error</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.SystemResourcePermissionDenied">
      <summary>permission denied to a system resource</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.OutOfSystemResource">
      <summary>system resource has been exhausted</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.SystemResourceError">
      <summary>system resource error</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ResourceNotFound">
      <summary>a required resource was not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.IOError">
      <summary>input/output error</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.BufferLimitViolation">
      <summary>a buffer underrun/overrun has occurred</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ServiceDefinitionError">
      <summary>service definition parse or validation error</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.OutOfRange">
      <summary>attempt to access an out of range element</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.KeyNotFound">
      <summary>key not found</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.InvalidConfiguration">
      <summary>invalid configuration specified</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.InvalidState">
      <summary>invalid state</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.RemoteError">
      <summary>error occurred on remote node</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.RequestTimeout">
      <summary>request timed out</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ReadOnlyMember">
      <summary>attempt to write to a read only member</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.WriteOnlyMember">
      <summary>attempt to read a write only member</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.NotImplementedError">
      <summary>member not implemented</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.MemberBusy">
      <summary>member is busy try again</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ValueNotSet">
      <summary>value has not been set</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.AbortOperation">
      <summary>abort operation (generator only)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.OperationAborted">
      <summary>the operation has been aborted</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.StopIteration">
      <summary>stop generator iteration (generator only)</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.OperationTimeout">
      <summary>the operation has timed out</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.OperationCancelled">
      <summary>the operation has been cancelled</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.AuthenticationError">
      <summary>authentication has failed</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.ObjectLockedError">
      <summary>the object is locked by another user or session</summary>
    </member>
    <member name="F:RobotRaconteur.MessageErrorType.PermissionDenied">
      <summary>permission to service object or resource denied</summary>
    </member>


    <member name="T:RobotRaconteur.ClientServiceListenerEventType">
      <summary>
        Enum of client listener events
      </summary>
    </member>

    <member name="F:RobotRaconteur.ClientServiceListenerEventType.ClientClosed">
      <summary>client has been closed</summary>
    </member>
    <member name="F:RobotRaconteur.ClientServiceListenerEventType.ClientConnectionTimeout">
      <summary>client connection has timed out</summary>
    </member>
    <member name="F:RobotRaconteur.ClientServiceListenerEventType.TransportConnectionConnected">
      <summary>client transport has been connected</summary>
    </member>
    <member name="F:RobotRaconteur.ClientServiceListenerEventType.TransportConnectionClosed">
      <summary>client transport connection has been closed or lost</summary>
    </member>
    <member name="F:RobotRaconteur.ClientServiceListenerEventType.ServicePathReleased">
      <summary>client has received notification that service path was released</summary>
    </member>

    <member name="T:RobotRaconteur.ServiceServiceListenerEventType">
      <summary>
        Enum of service listener events
      </summary>
    </member>

    <member name="F:RobotRaconteur.ServerServiceListenerEventType.ServiceClosed">
      <summary>service has been closed</summary>
    </member>
    <member name="F:RobotRaconteur.ServerServiceListenerEventType.ClientConnected">
      <summary>client has connected</summary>
    </member>
    <member name="F:RobotRaconteur.ServerServiceListenerEventType.ClientDisconnected">
      <summary>client has disconnected</summary>
    </member>

    <member name="T:RobotRaconteur.MemberDefinition_Direction">
      <summary>
        Member direction enum

        Use member modifiers to declare member direction (readonly,writeonly)
      </summary>
    </member>

    <member name="F:RobotRaconteur.MemberDefinition_Direction.Direction_both">
      <summary>member supports read and write</summary>
    </member>
    <member name="F:RobotRaconteur.MemberDefinition_Direction.Direction_readonly">
      <summary>member is readonly</summary>
    </member>
    <member name="F:RobotRaconteur.MemberDefinition_Direction.Directionwriteonly">
      <summary>member is writeonly</summary>
    </member>

    <member name="T:RobotRaconteur.MemberDefinition_NoLock">
      <summary>
        Member locking options enum

        Use member modifiers to declare lock options
      </summary>
    </member>

    <member name="F:RobotRaconteur.MemberDefinition_NoLock.NoLock_none">
      <summary>member cannot be accessed by other users/sessions when object is locked</summary>
    </member>
    <member name="F:RobotRaconteur.MemberDefinition_NoLock.NoLock_all">
      <summary>member can be accessed by other users/sessions when object is locked</summary>
    </member>
    <member name="F:RobotRaconteur.MemberDefinition_NoLock.NoLock_read">
      <summary>member can be read by other users/sessions when object is locked</summary>
    </member>

    <member name="T:RobotRaconteur.LogLevel">
      <summary>
        Log level enum

        Enum of possible log levels. Set log level using
        RobotRaconteurNode::SetLogLevel(),
        `ROBOTRACONTEUR_LOG_LEVEL` environmental variable, or
        `--robotraconteur-log-level` node setup command line option
      </summary>
    </member>

    <member name="F:RobotRaconteur.LogLevel.LogLevel_Trace">
      <summary>`trace` log level</summary>
    </member>
    <member name="F:RobotRaconteur.LogLevel.LogLevel_Debug">
      <summary>`debug` log level</summary>
    </member>
    <member name="F:RobotRaconteur.LogLevel.LogLevel_Info">
      <summary>`info` log level</summary>
    </member>
    <member name="F:RobotRaconteur.LogLevel.LogLevel_Warning">
      <summary>`warning` log level</summary>
    </member>
    <member name="F:RobotRaconteur.LogLevel.LogLevel_Error">
      <summary>`error` log level</summary>
    </member>
    <member name="F:RobotRaconteur.LogLevel.LogLevel_Fatal">
      <summary>`fatal` log level</summary>
    </member>
    <member name="F:RobotRaconteur.LogLevel.LogLevel_Disable">
      <summary>`disabled` log level</summary>
    </member>


    <member name="T:RobotRaconteur.LogComponent">
      <summary>
        Log component enum

        Log records contain the code of the component where
        the log record was generated
      </summary>
    </member>

    <member name="F:RobotRaconteur.LogComponent.LogComponent_Default">
      <summary>default component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Node">
      <summary>Robot Raconteur Node component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Transport">
      <summary>tranport component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Message">
      <summary>message or message serialization component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Client">
      <summary>client component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Service">
      <summary>service component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Member">
      <summary>member component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Pack">
      <summary>data message packing component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Unpack">
      <summary>data message unpacknig component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_ServiceDefinition">
      <summary>service definition parser component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Discovery">
      <summary>node/service discovery component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Subscription">
      <summary>subscription component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_NodeSetup">
      <summary>node setup component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_Utility">
      <summary>utility component</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_RobDefLib">
      <summary>service definition standard library component (external)</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_User">
      <summary>user component (external)</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_UserClient">
      <summary>user client component (external)</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_UserService">
      <summary>user service component (external)</summary>
    </member>
    <member name="F:RobotRaconteur.LogComponent.LogComponent_ThirdParty">
      <summary>third party library component (external)</summary>
    </member>

    <!-- RobotRaconteurNode.h -->

    <member name="T:RobotRaconteur.RobotRaconteurObjectLockFlags">
      <summary>
        The type of object lock
      </summary>
    </member>
    <member name="F:RobotRaconteur.RobotRaconteurObjectLockFlags.CLIENT_LOCK">
      <summary>
        Client level lock

        Only the current client connection will have access
        to the locked object
      </summary>
    </member>
    <member name="F:RobotRaconteur.RobotRaconteurObjectLockFlags.USER_LOCK">
      <summary>
        User level lock

        The object will be accesible for all client connections
        authenticated by the current user
      </summary>
    </member>

    <member name="T:RobotRaconteur.RobotRaconteurNode">
      <summary>
        The central node implementation

        RobotRaconteurNode implements the current Robot Raconteur instance
        and acts as the central switchpoint for the instance. The user
        registers types, connects clients, registers services, and
        registers transports through this class.

        If the current program only needs one instance of RobotRaconteurNode,
        the singleton can be used. The singleton is accessed using:

        `RobotRaconteurNode.s`

        The node must be shut down before existing the program,
        or a memory leak/hard crash will occur. This can either be
        accomplished manually using the `Shutdown()` function,
        or automatically by using the ClientNodeSetup or
        ServerNodeSetup classes.
      </summary>
    </member>

    <member name="P:RobotRaconteur.RobotRaconteurNode.s">
      <summary>
        Singleton accessor

        The RobotRaconteurNode singleton can be used when only
        one instance of Robot Raconteur is required in a program.
        The singleton must be shut down when the program exits.
      </summary>
    </member>

    <member name="P:RobotRaconteur.RobotRaconteurNode.ThreadPoolCount">
      <summary>
        Get or set the number of threads for the node ThreadPool

        The ThreadPool will use a maximum of count threads. If
        this number is lower than the current ThreadPool count,
        the ThreadPool will attempt to release threads beyond count
        as they return to idle
      </summary>
    </member>

    <member name="P:RobotRaconteur.RobotRaconteurNode.NowUTC">
      <summary>
        The current time in UTC time zone

        Uses the internal node clock to get the current time in UTC.
        While this will normally use the system clock, this may
        use simulation time in certain circumstances
      </summary>
    </member>

    <member name="P:RobotRaconteur.RobotRaconteurNode.NowNodeTime">
      <summary>
        The current node time

        UTC time is not monotonic, due to the introduction of leap-seconds, and the possibility
        of the system clock being updated by the user. For a real-time systems,
        this is unaccetpable and can lead to system instability. The "node time" used by Robot
        Raconteur
        is synchronized to UTC at startup, and is then steadily increasing from that initial time.
        It will ignore changes to the system clock, and will also ignore corrections like leap
        seconds.
      </summary>
    </member>

    <member name="P:RobotRaconteur.RobotRaconteurNode.NodeSyncTimeUTC">
      <summary>
        The sync time of the node

        The node synchronizes it's clock with the system time in UTC
        when the node is initialized. After this time, a steady
        clock is used. This prevents the clock from jumping
        forward and back in time. It will no longer be updated
        by changes in the system time.

        If an external high precision clock source like PTP is available,
        that clock will be used in place of the system and steady clock.
      </summary>
    </member>

    <member name="P:RobotRaconteur.RobotRaconteurNode.NowTimeSpec">
      <summary>
        The current node time as a TimeSpec

        The current node time as a TimeSpec. See NowNodeTime
      </summary>
    </member>

    <member name="P:RobotRaconteur.RobotRaconteurNode.NodeSyncTimeSpec">
      <summary>
        The sync time of the node as a TimeSpec

        See NodeSyncTimeUTC
      </summary>
    </member>

    <member name="P:RobotRaconteur.RobotRaconteurNode.RequestTimeout">
      <summary>
        Get or set the timeout for requests in milliseconds

        Requests are calls to a remote node that expect a response. `function`,
        `property`, `callback`, `memory`, and setup calls in `pipe` and `wire`
        are all requests. All other Robot Raconteur functions that call the remote
        node and expect a response are requests. Default timeout is 15 seconds.
      </summary>
    </member>

    <member name="P:RobotRaconteur.RobotRaconteurNode.TransportInactivityTimeout">
      <summary>
        Get or set the timeout for transport activity in milliseconds

        Sets a timeout for transport inactivity. If no message
        is sent or received on the transport for the specified time,
        the transport is closed. Default timeout is 10 minutes.
      </summary>
    </member>

    <member name="P:RobotRaconteur.RobotRaconteurNode.EndpointInactivityTimeout">
      <summary>
        Get or set the timeout for endpoint activity in milliseconds

        Sets a timeout for endpoint inactivity. If no message
        is sent or received by the endpoint for the specified time,
        the endpoint is closed. Default timeout is 10 minutes.
      </summary>
    </member>

    <member name="P:RobotRaconteur.RobotRaconteurNode.MemoryMaxTransferSize">
      <summary>
        Get or set the maximum chunk size for memory transfers in bytes

        `memory` members break up large transfers into chunks to avoid
        sending messages larger than the transport maximum, which is normally
        approximately 10 MB. The memory max transfer size is the largest
        data chunk the memory will send, in bytes. Default is 100 kB.
      </summary>
    </member>

    <member name="P:RobotRaconteur.RobotRaconteurNode.NodeID">
      <summary>
        Get or set the current NodeID

        Gets or setthe current NodeID. If one has not been set,
        one will be automatically generated. Cannot be set if a NodeID has been assigned.
      </summary>
    </member>

    <member name="P:RobotRaconteur.RobotRaconteurNode.NodeName">
      <summary>
        Get or set the current NodeName

        Gets or set the current NodeName. If one has not been set using,
        it will be an empty string. Cannot be set if a NodeName has been assigned.
      </summary>
    </member>

    <member name="P:RobotRaconteur.RobotRaconteurNode.RobotRaconteurVersion">
      <summary>
        Get the current RobotRaconteurVersion as a string

        Version is three numbers separated by dots, ie "0.9.2"
      </summary>
    </member>

    <member name="P:RobotRaconteur.RobotRaconteurNode.NodeDiscoveryMaxCacheCount">
      <summary>
        Get or set the maximum number of detected nodes that will be cached

        The node keeps a cache of detected nodes. The NodeDiscoveryMaxCacheCount
        sets an upper limit to how many detected nodes are cached. By default set to 4096
      </summary>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.SelectRemoteNodeURL">
      <summary>
        Select the "best" URL from a std::vector of candidates

        Service discovery will often return a list of candidate URLs to
        use to connect to a node. This function uses hueristics to select
        the "best" URL to use. The selection criteria ranks URLs in roughly
        the following order, lower number being better:

        1. "rr+intra" for IntraTransport
        2. "rr+local" for LocalTransport
        3. "rr+pci" or "rr+usb" for HardwareTransport
        4. "rrs+tcp://127.0.0.1" for secure TcpTransport loopback
        5. "rrs+tcp://[::1]" for secure TcpTransport IPv6 loopback
        6. "rrs+tcp://localhost" for secure TcpTransport loopback
        7. "rrs+tcp://[fe80" for secure TcpTransport link-local IPv6
        8. "rrs+tcp://" for any secure TcpTransport
        9. "rr+tcp://127.0.0.1" for TcpTransport loopback
        10. "rr+tcp://[::1]" for TcpTransport IPv6 loopback
        11. "rr+tcp://localhost" for TcpTransport loopback
        12. "rr+tcp://[fe80" for TcpTransport link-local IPv6
        13. "rr+tcp://" for any TcpTransport
      </summary>
      <param name="urls">The candidate URLs</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.SplitQualifiedName">
      <summary>
        Split a qualified name into its service definition name and unqualified name parts
      </summary>
      <returns>Tulpe containing service definition name and unqualified name</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.AsyncConnectService">
      <summary>
        Asynchronously create a client connection to a remote service using a URL

        Same as ConnectService but async. See ConnectService() for more details
        on client connections.
      </summary>
      <param name="url">The URL of the service to connect</param>
      <param name="username">An optional username for authentication</param>
      <param name="credentials">Optional credentials for authentication</param>
      <param name="listener">An optional listener callback function</param>
      <param name="objecttype">The desired root object proxy type. Optional but highly recommended.</param>
      <param name="timeout">Timeout is milliseconds, or RR_TIMEOUT_INFINITE for no timeout.</param>
      <returns>Task that returns the client object upon completion</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.AsyncDisconnectService">
      <summary>
        Asynchronously disconnects a client connection to a service

        Same as DisconnectService() but async.
      </summary>
      <param name="obj">The root object of the client to disconnect</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.AsyncFindNodeByID">
      <summary>
        Asynchronously finds nodes on the network with the specified NodeID

        Same as FindNodeByID() but async
      </summary>
      <param name="id">The NodeID to find</param>
      <param name="transportschemes">A list of transport types to search, ie `rr+tcp`, `rr+local`,
        `rrs+tcp`, etc</param>
      <param name="timeout">Timeout in milliseconds. Using a timeout greater than 5 seconds is not
        recommended.</param>
      <returns>Task that returns array of detected nodes upon completion</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.AsyncFindNodeByName">
      <summary>
        Asynchronously finds nodes on the network with the specified NodeName

        Same as FindNodeByName() but async
      </summary>
      <param name="name">The NodeName to find</param>
      <param name="transportschemes">A list of transport types to search, ie `rr+tcp`, `rr+local`,
        `rrs+tcp`, etc</param>
      <param name="timeout">Timeout in milliseconds. Using a timeout greater than 5 seconds is not
        recommended.</param>
      <returns>Task that returns array of detected nodes upon completion</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.AsyncFindObjectType">
      <summary>
        Asynchronously returns the type of a service object

        Same as FindObjectType() but async
      </summary>
      <param name="obj">The object with the desired `objref`</param>
      <param name="objref">The name of the `objref` member</param>
      <param name="index">The index for the `objref`, convert int to string for int32 index type</param>
      <param name="timeout">Timeout is milliseconds, or RR_TIMEOUT_INFINITE for no timeout</param>
      <returns>Task that returns fully qualified object type upon completion</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.AsyncFindObjRefTyped">
      <summary>
        Asynchronously returns an objref as a specific type

        Same as FindObjectType() but async
      </summary>

      <param name="obj">The object with the desired `objref`</param>
      <param name="objref">The name of the `objref` member</param>
      <param name="index">The index for the `objref`, convert int to string for int32 index type</param>
      <param name="objecttype">The desired service object type</param>
      <param name="timeout">Timeout is milliseconds, or RR_TIMEOUT_INFINITE for no timeout</param>
      <returns>Task that returns the object reference</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.AsyncFindServiceByType">
      <summary>
        Asynchronously use discovery to find availabe services by service type
     
      Same as FindServiceByType() but async
      </summary>
      <param name="servicetype">The service type to find, ie `com.robotraconteur.robotics.robot.Robot`</param>
      <param name="transportschemes">A list of transport types to search, ie `rr+tcp`, `rr+local`, `rrs+tcp`, etc</param>
      <param name="timeout">Timeout in milliseconds. Using a timeout greater than 5 seconds is not recommended.</param>
      <returns>A task that returns array of detected services upon completion</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.AsyncReleaseObjectLock">
      <summary>
        Asynchronously release an excluse access lock previously locked
      with RequestObjectLock() or AsyncRequestObjectLock()
     
      Same as ReleaseObjectLock() but async
      </summary>
      <param name="obj">The object previously locked</param>
      <param name="timeout">Timeout in milliseconds, or RR_TIMEOUT_INFINITE</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.AsyncRequestObjectLock">
      <summary>
        Asynchronously request an exclusive access lock to a service object
     
      Same as RequestObjectLock() but async
      </summary>
      <param name="obj">The object to lock. Must be returned by ConnectService or returned by an `objref`</param>
      <param name="flags">Select either a "User" or "Session" lock</param>
      <param name="timeout">Timeout in milliseconds, or RR_TIMEOUT_INFINITE</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.AsyncUpdateDetectedNodes">
      <summary>
        Asynchronously update the detected nodes cache
     
      Same as UpdateDetectedNodes() but async
      </summary>
      <param name="schemes">A vector of transport schemes, ie "rr+tcp", "rr+local", etc. to update.</param>
      <param name="timeout">The timeout for the operation in milliseconds. This function will often run
         for the full timeout, so values less than 5 seconds are recommended.</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.CheckConnection">
      <summary>
        Check that the TransportConnection associated with an endpoint
      is connected
      </summary>
      <param name="endpoint">The LocalEndpoint identifier to check</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.CloseService">
      <summary>
        Closes a previously registered service
     
      Services are automatically closed by Shutdown, so this function
      is rarely used.
      </summary>
      <param name="sname">The name of the service to close</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.CompareLogLevel">
      <summary>
        Test if the specified log level would be accepted
      </summary>
      <param name="log_level">Log level to test</param>
      <returns>true if the log would be accepted</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.ConnectService">
      <summary>
        Create a client connection to a remote service using a URL
     
      Synchronously creates a connection to a remote service using a URL. URLs are either provided by
      the service, or are determined using discovery functions such as FindServiceByType().
      This function is the primary way to create client connections.
     
      username and credentials can be used to specify authentication information. Credentials will
      often contain a "password" or token entry.
     
      The listener is a function that is called during various events. See ClientServiceListenerEventType
      for a description of the possible events.
     
      ConnectService will attempt to instantiate a client object reference (proxy) based on the type
      information provided by the service. The type information will contain the type of the object,
      and all the implemented types. The client will normally want a specific one of the implement types.
      Specify this desired type in objecttype to avoid future compatibility issues.
     
      Requires multithreading

      </summary>
      <param name="url">The URL of the service to connect</param>
      <param name="username">An optional username for authentication</param>
      <param name="credentials">Optional credentials for authentication</param>
      <param name="listener">An optional listener callback function</param>
      <param name="objecttype">The desired root object proxy type. Optional but highly recommended.</param>
      <returns>The root object reference of the connected service</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.CreateAutoResetEvent">
      <summary>
        Create an AutoResetEvent object
     
      Normally the AutoResetEvent will use the system clock for timeouts,
      but in certain circumstances will use simulation time
      </summary>
      <returns>The new AutoResetEvent object</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.CreateRate">
      <summary>
        Create a Rate object
     
      Rate is used to stabilize periodic loops to a specified frequency
     
      This function will normally return a WallRate instance
      </summary>
      <param name="frequency">Frequency of loop in Hz</param>
      <returns>The new Rate object</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.CreateTimer">
      <summary>
        Create a Timer object
     
      This function will normally return a WallTimer instance
     
      Start() must be called after timer creation
      </summary>
      <param name="period">The period of the timer</param>
      <param name="handler">The handler function to call when timer times out</param>
      <param name="oneshot">True if timer is a one-shot timer, false for repeated timer</param>
      <returns>The new Timer object. Must call Start()</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.DisconnectService">
      <summary>
        Disconnects a client connection to a service
     
      Synchronously disconnects a client connection. Client connections
      are automatically closed by Shutdown(), so this function
      is optional.
     
      Requires multithreading
      </summary>
      <param name="obj">The root object of the service to disconnect</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.DownCastException">
      <summary>
        Downcasts a RobotRaconteurException
     
      Serialized RobotRaconteurException may not be correctly downcast when
      deserialized. DownCastException will find the correct type,
      downcast the exception, and return the correctly typed exception
      </summary>
      <param name="exp">The RobotRaconteurException to downcast</param>
      <returns>The downcasted exception</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.FindNodeByID">
      <summary>
        Finds nodes on the network with a specified NodeID
     
      Updates the discovery cache and find nodes with the specified NodeID.
      This function returns unverified cache information.
     
      Requires multithreading
      </summary>
      <param name="id">The NodeID to find</param>
      <param name="transportschemes">A list of transport types to search, ie `rr+tcp`, `rr+local`,
        `rrs+tcp`, etc</param>
      <returns>Array of detected nodes</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.FindNodeByName">
      <summary>
        Finds nodes on the network with a specified NodeName
     
      Updates the discovery cache and find nodes with the specified NodeName.
      This function returns unverified cache information.
     
      Requires multithreading
      </summary>
      <param name="name">The NodeName to find</param>
      <param name="transportschemes">A list of transport types to search, ie `rr+tcp`, `rr+local`,
        `rrs+tcp`, etc</param>
      <returns>Array of detected nodes</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.FindObjectType">
      <summary>
        Returns the type of a service object
     
      Returns the fully qualified object type that would be returned by an `objref` member
     
      Requires multithreading
      </summary>
      <param name="obj">The object with the desired `objref`</param>
      <param name="objref">The name of the `objref` member</param>
      <param name="index">The index for the `objref`, convert int to string for int32 index type</param>
      <returns>The fully qualified object type</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.FindObjRefTyped">
      <summary>
        Returns an objref as a specific type
     
      Robot Raconteur service object types are polymorphic using inheritence,
      meaning that an object may be represented using multiple object types.
      `objref` will attempt to return the relevant type, but it is sometimes
      necessary to request a specific type for an objref.
     
      This function will return the object from an `objref` as the specified type,
      or throw an error if the type is invalid.
     
      Requires multithreading
      </summary>

      <param name="obj">The object with the desired `objref`</param>
      <param name="objref">The name of the `objref` member</param>
      <param name="index">The index for the `objref`, convert int to string for int32 index type</param>
      <param name="objecttype">The desired service object type</param>
      <returns>The object reference</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.FindServiceByType">
      <summary>
        Use discovery to find available services by service type
        
         Uses discovery to find available services based on a service type. This
         service type is the type of the root object, ie
         `com.robotraconteur.robotics.robot.Robot`. This process will update the detected
         node cache.
        
         Requires multithreading
      </summary>
      <param name="servicetype">The service type to find, ie `com.robotraconteur.robotics.robot.Robot`</param>
      <param name="transportschemes">A list of transport types to search, ie `rr+tcp`, `rr+local`, `rrs+tcp`, etc</param>
      <returns>Array of detected services</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.GetDetectedNodeCacheInfo">
      <summary>
        Get cached node discovery information
     
      Return current node information from the discovery cache. This
      information is unverified and is used for the first step in the
      discovery process.
      </summary>
      <param name="nodeid">The NodeID of the requested node</param>
      <returns>The current detected node info</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.GetLogLevel">
      <summary>
        Get the current log level for the node
     
      Default level is "info"
      </summary>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.GetLogRecordHandler">
      <summary>
        Get the currently configured log record handler
     
      If null, records are sent to stderr
      </summary>

    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.GetObjectServicePath">
      <summary>
        Get the service path of a client object
      </summary>
      <param name="obj">The object to get the service path for</param>
      <returns>The object's service path</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.GetObjectType">
      <summary>
        Get the Robot Raconteur type of a connected service object
      obj must be returned by ConnectService(), AsyncConnectService(),
      or an `objref`
      </summary>
      <param name="obj">The object to query</param>
      <returns>The Robot Raconteur type of the object</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.GetServiceAttributes">
      <summary>
        Get the service attributes of a client connection
     
      Returns the service attributes of a client connected using
      ConnectService()
      </summary>
      <param name="obj">The root object of the client to use to retrieve service attributes</param>
      <returns>Dictionary of the service attributes</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.GetServiceFactory">
      <summary>
        Returns a previously registered service factory
      </summary>
      <param name="servicename">The type of the factory</param>
      <returns>The factory</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.GetServiceName">
      <summary>
        Get the name of a service from a client connection
     
      Returns the service name of the remote service that a client is connected
      </summary>
      <param name="obj">The root object of the client to use to retrieve service attributes</param>
      <returns>The service name</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.GetServiceNodeID">
      <summary>
        Get the service NodeID of the remote node from a client connection
     
      Returns the NodeID of the remote node that a client is connected
      </summary>
      <param name="obj">The root object of the client to use to retrieve service attributes</param>
      <returns>The NodeID</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.GetServiceNodeName">
      <summary>
        Get the service NodeName of the remote node from a client connection
     
      Returns the NodeName of the remote node that a client is connected
      </summary>
      <param name="obj">The root object of the client to use to retrieve service attributes</param>
      <returns>The NodeName</returns>
    </member>



    <member name="M:RobotRaconteur.RobotRaconteurNode.GetServiceType">
      <summary>
        Returns a previously registered service type
      </summary>
      <param name="type">The name of the service type to retrieve</param>
      <returns>The service factory</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.IsServiceTypeRegistered">
      <summary>
        Check if a service type has been registered
      </summary>
      <param name="type">The name of the service type to check</param>
      <returns>true if registered, otherwise false</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.LogMessage">
      <summary>
        Log a simple message using the current node
     
      The record will be sent to the configured log handler,
      or sent to std::cerr if none is configured
     
      If the level of the message is below the current log level
      for the node, the record will be ignored
      </summary>
      <param name="level">The level for the log message</param>
      <param name="message">The log message</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.LogRecord">
      <summary>
        Log a record to the node. 
     
      The record will be sent to the configured log handler,
      or sent to stderr if none is configured
     
      If the level of the message is below the current log level
      for the node, it will be ignored
      </summary>
      <param name="record">The record to log</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.MonitorEnter">
      <summary>
        Creates a monitor lock on a specified object
     
      Monitor locks are intendended for short operations that require
      guarding to prevent races, corruption, or other concurrency problems.
      Monitors emulate a single thread locking the service object.
     
      Use of ScopedMonitorLock instead of this function is highly recommended
     
      Monitor locks do not lock any sub-objects (objref)
     
      Requires multithreading
      </summary>
      <param name="obj">The object to lock</param>
      <param name="timeout"> The timeout in milliseconds to acquire the monitor lock, or RR_TIMEOUT_INFINITE</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.MonitorExit">
      <summary>
        Release a monitor lock
      </summary>
      <param name="obj">The object previously locked by MonitorEnter()</param>
    </member>

    

    <member name="M:RobotRaconteur.RobotRaconteurNode.RegisterServiceType">
      <summary>
        Register a service type
      </summary>
      <param name="factory">The service factory implementing the type to register</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.UnregisterServiceType">
      <summary>
        Unregister a previously registered service type

        This function is not recommended as the results can be
        unpredicatle
      </summary>
      <param name="type">The type to unregister</param>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.GetRegisteredServiceTypes">
      <summary>
        Return names of registered service types
      </summary>
      <returns>The registered service types</returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.PackStructure">
      <summary>
        Packs a structure for use in a MessageElement

        Finds the correct ServiceFactory to pack the structure, then
        uses the ServiceFactory to pack the structure to a
        MessageElementNestedElementList for use in a MessageElement.

        Throws ServiceException if the correct ServiceFactory cannot
        be found.
      </summary>
      <param name="s"></param>
      <returns></returns>
    </member>

    <member name="M:RobotRaconteur.RobotRaconteurNode.UnpackStructure">
      <summary>
        Unpacks a structure from a MessageElementNestedElementList

        structure must have type code DataTypes_structure_t. Finds the correct
        ServiceFactory to unpack the structure, then uses the ServiceFactory
        to unpack the structure.

        Throws ServiceException if the correct ServiceFactory cannot
        be found.
      </summary>
      <param name="l"></param>
      <returns></returns>
    </member>


  </members>
</doc>